// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[36]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_ADD_FRIEND;
struct C_ADD_FRIENDDefaultTypeInternal;
extern C_ADD_FRIENDDefaultTypeInternal _C_ADD_FRIEND_default_instance_;
class C_AUTO_LOGIN;
struct C_AUTO_LOGINDefaultTypeInternal;
extern C_AUTO_LOGINDefaultTypeInternal _C_AUTO_LOGIN_default_instance_;
class C_CHAT;
struct C_CHATDefaultTypeInternal;
extern C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
class C_CHECK_DUPLICATE_ID;
struct C_CHECK_DUPLICATE_IDDefaultTypeInternal;
extern C_CHECK_DUPLICATE_IDDefaultTypeInternal _C_CHECK_DUPLICATE_ID_default_instance_;
class C_CHECK_FRIEND;
struct C_CHECK_FRIENDDefaultTypeInternal;
extern C_CHECK_FRIENDDefaultTypeInternal _C_CHECK_FRIEND_default_instance_;
class C_CREATE_ACCOUNT;
struct C_CREATE_ACCOUNTDefaultTypeInternal;
extern C_CREATE_ACCOUNTDefaultTypeInternal _C_CREATE_ACCOUNT_default_instance_;
class C_CREATE_ROOM;
struct C_CREATE_ROOMDefaultTypeInternal;
extern C_CREATE_ROOMDefaultTypeInternal _C_CREATE_ROOM_default_instance_;
class C_DESTROY_ROOM;
struct C_DESTROY_ROOMDefaultTypeInternal;
extern C_DESTROY_ROOMDefaultTypeInternal _C_DESTROY_ROOM_default_instance_;
class C_ENTER_GAME;
struct C_ENTER_GAMEDefaultTypeInternal;
extern C_ENTER_GAMEDefaultTypeInternal _C_ENTER_GAME_default_instance_;
class C_GET_FRIEND;
struct C_GET_FRIENDDefaultTypeInternal;
extern C_GET_FRIENDDefaultTypeInternal _C_GET_FRIEND_default_instance_;
class C_GET_REQUESTS;
struct C_GET_REQUESTSDefaultTypeInternal;
extern C_GET_REQUESTSDefaultTypeInternal _C_GET_REQUESTS_default_instance_;
class C_JOIN_ROOM;
struct C_JOIN_ROOMDefaultTypeInternal;
extern C_JOIN_ROOMDefaultTypeInternal _C_JOIN_ROOM_default_instance_;
class C_LEAVE_ROOM;
struct C_LEAVE_ROOMDefaultTypeInternal;
extern C_LEAVE_ROOMDefaultTypeInternal _C_LEAVE_ROOM_default_instance_;
class C_LOGIN;
struct C_LOGINDefaultTypeInternal;
extern C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
class C_LOGOUT;
struct C_LOGOUTDefaultTypeInternal;
extern C_LOGOUTDefaultTypeInternal _C_LOGOUT_default_instance_;
class C_SEND_INVITATION;
struct C_SEND_INVITATIONDefaultTypeInternal;
extern C_SEND_INVITATIONDefaultTypeInternal _C_SEND_INVITATION_default_instance_;
class C_SEND_REQUEST;
struct C_SEND_REQUESTDefaultTypeInternal;
extern C_SEND_REQUESTDefaultTypeInternal _C_SEND_REQUEST_default_instance_;
class C_SHOW_ROOM;
struct C_SHOW_ROOMDefaultTypeInternal;
extern C_SHOW_ROOMDefaultTypeInternal _C_SHOW_ROOM_default_instance_;
class S_ACTIVE_FRIEND;
struct S_ACTIVE_FRIENDDefaultTypeInternal;
extern S_ACTIVE_FRIENDDefaultTypeInternal _S_ACTIVE_FRIEND_default_instance_;
class S_ADD_FRIEND;
struct S_ADD_FRIENDDefaultTypeInternal;
extern S_ADD_FRIENDDefaultTypeInternal _S_ADD_FRIEND_default_instance_;
class S_CHAT;
struct S_CHATDefaultTypeInternal;
extern S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
class S_CHECK_DUPLICATE_ID;
struct S_CHECK_DUPLICATE_IDDefaultTypeInternal;
extern S_CHECK_DUPLICATE_IDDefaultTypeInternal _S_CHECK_DUPLICATE_ID_default_instance_;
class S_CHECK_FRIEND;
struct S_CHECK_FRIENDDefaultTypeInternal;
extern S_CHECK_FRIENDDefaultTypeInternal _S_CHECK_FRIEND_default_instance_;
class S_CREATE_ACCOUNT;
struct S_CREATE_ACCOUNTDefaultTypeInternal;
extern S_CREATE_ACCOUNTDefaultTypeInternal _S_CREATE_ACCOUNT_default_instance_;
class S_CREATE_ROOM;
struct S_CREATE_ROOMDefaultTypeInternal;
extern S_CREATE_ROOMDefaultTypeInternal _S_CREATE_ROOM_default_instance_;
class S_DESTROY_ROOM;
struct S_DESTROY_ROOMDefaultTypeInternal;
extern S_DESTROY_ROOMDefaultTypeInternal _S_DESTROY_ROOM_default_instance_;
class S_ENTER_GAME;
struct S_ENTER_GAMEDefaultTypeInternal;
extern S_ENTER_GAMEDefaultTypeInternal _S_ENTER_GAME_default_instance_;
class S_GET_FRIEND;
struct S_GET_FRIENDDefaultTypeInternal;
extern S_GET_FRIENDDefaultTypeInternal _S_GET_FRIEND_default_instance_;
class S_GET_REQUESTS;
struct S_GET_REQUESTSDefaultTypeInternal;
extern S_GET_REQUESTSDefaultTypeInternal _S_GET_REQUESTS_default_instance_;
class S_JOIN_ROOM;
struct S_JOIN_ROOMDefaultTypeInternal;
extern S_JOIN_ROOMDefaultTypeInternal _S_JOIN_ROOM_default_instance_;
class S_LEAVE_ROOM;
struct S_LEAVE_ROOMDefaultTypeInternal;
extern S_LEAVE_ROOMDefaultTypeInternal _S_LEAVE_ROOM_default_instance_;
class S_LOGIN;
struct S_LOGINDefaultTypeInternal;
extern S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
class S_LOGOUT;
struct S_LOGOUTDefaultTypeInternal;
extern S_LOGOUTDefaultTypeInternal _S_LOGOUT_default_instance_;
class S_SEND_INVITATION;
struct S_SEND_INVITATIONDefaultTypeInternal;
extern S_SEND_INVITATIONDefaultTypeInternal _S_SEND_INVITATION_default_instance_;
class S_SEND_REQUEST;
struct S_SEND_REQUESTDefaultTypeInternal;
extern S_SEND_REQUESTDefaultTypeInternal _S_SEND_REQUEST_default_instance_;
class S_SHOW_ROOM;
struct S_SHOW_ROOMDefaultTypeInternal;
extern S_SHOW_ROOMDefaultTypeInternal _S_SHOW_ROOM_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_ADD_FRIEND* Arena::CreateMaybeMessage<::Protocol::C_ADD_FRIEND>(Arena*);
template<> ::Protocol::C_AUTO_LOGIN* Arena::CreateMaybeMessage<::Protocol::C_AUTO_LOGIN>(Arena*);
template<> ::Protocol::C_CHAT* Arena::CreateMaybeMessage<::Protocol::C_CHAT>(Arena*);
template<> ::Protocol::C_CHECK_DUPLICATE_ID* Arena::CreateMaybeMessage<::Protocol::C_CHECK_DUPLICATE_ID>(Arena*);
template<> ::Protocol::C_CHECK_FRIEND* Arena::CreateMaybeMessage<::Protocol::C_CHECK_FRIEND>(Arena*);
template<> ::Protocol::C_CREATE_ACCOUNT* Arena::CreateMaybeMessage<::Protocol::C_CREATE_ACCOUNT>(Arena*);
template<> ::Protocol::C_CREATE_ROOM* Arena::CreateMaybeMessage<::Protocol::C_CREATE_ROOM>(Arena*);
template<> ::Protocol::C_DESTROY_ROOM* Arena::CreateMaybeMessage<::Protocol::C_DESTROY_ROOM>(Arena*);
template<> ::Protocol::C_ENTER_GAME* Arena::CreateMaybeMessage<::Protocol::C_ENTER_GAME>(Arena*);
template<> ::Protocol::C_GET_FRIEND* Arena::CreateMaybeMessage<::Protocol::C_GET_FRIEND>(Arena*);
template<> ::Protocol::C_GET_REQUESTS* Arena::CreateMaybeMessage<::Protocol::C_GET_REQUESTS>(Arena*);
template<> ::Protocol::C_JOIN_ROOM* Arena::CreateMaybeMessage<::Protocol::C_JOIN_ROOM>(Arena*);
template<> ::Protocol::C_LEAVE_ROOM* Arena::CreateMaybeMessage<::Protocol::C_LEAVE_ROOM>(Arena*);
template<> ::Protocol::C_LOGIN* Arena::CreateMaybeMessage<::Protocol::C_LOGIN>(Arena*);
template<> ::Protocol::C_LOGOUT* Arena::CreateMaybeMessage<::Protocol::C_LOGOUT>(Arena*);
template<> ::Protocol::C_SEND_INVITATION* Arena::CreateMaybeMessage<::Protocol::C_SEND_INVITATION>(Arena*);
template<> ::Protocol::C_SEND_REQUEST* Arena::CreateMaybeMessage<::Protocol::C_SEND_REQUEST>(Arena*);
template<> ::Protocol::C_SHOW_ROOM* Arena::CreateMaybeMessage<::Protocol::C_SHOW_ROOM>(Arena*);
template<> ::Protocol::S_ACTIVE_FRIEND* Arena::CreateMaybeMessage<::Protocol::S_ACTIVE_FRIEND>(Arena*);
template<> ::Protocol::S_ADD_FRIEND* Arena::CreateMaybeMessage<::Protocol::S_ADD_FRIEND>(Arena*);
template<> ::Protocol::S_CHAT* Arena::CreateMaybeMessage<::Protocol::S_CHAT>(Arena*);
template<> ::Protocol::S_CHECK_DUPLICATE_ID* Arena::CreateMaybeMessage<::Protocol::S_CHECK_DUPLICATE_ID>(Arena*);
template<> ::Protocol::S_CHECK_FRIEND* Arena::CreateMaybeMessage<::Protocol::S_CHECK_FRIEND>(Arena*);
template<> ::Protocol::S_CREATE_ACCOUNT* Arena::CreateMaybeMessage<::Protocol::S_CREATE_ACCOUNT>(Arena*);
template<> ::Protocol::S_CREATE_ROOM* Arena::CreateMaybeMessage<::Protocol::S_CREATE_ROOM>(Arena*);
template<> ::Protocol::S_DESTROY_ROOM* Arena::CreateMaybeMessage<::Protocol::S_DESTROY_ROOM>(Arena*);
template<> ::Protocol::S_ENTER_GAME* Arena::CreateMaybeMessage<::Protocol::S_ENTER_GAME>(Arena*);
template<> ::Protocol::S_GET_FRIEND* Arena::CreateMaybeMessage<::Protocol::S_GET_FRIEND>(Arena*);
template<> ::Protocol::S_GET_REQUESTS* Arena::CreateMaybeMessage<::Protocol::S_GET_REQUESTS>(Arena*);
template<> ::Protocol::S_JOIN_ROOM* Arena::CreateMaybeMessage<::Protocol::S_JOIN_ROOM>(Arena*);
template<> ::Protocol::S_LEAVE_ROOM* Arena::CreateMaybeMessage<::Protocol::S_LEAVE_ROOM>(Arena*);
template<> ::Protocol::S_LOGIN* Arena::CreateMaybeMessage<::Protocol::S_LOGIN>(Arena*);
template<> ::Protocol::S_LOGOUT* Arena::CreateMaybeMessage<::Protocol::S_LOGOUT>(Arena*);
template<> ::Protocol::S_SEND_INVITATION* Arena::CreateMaybeMessage<::Protocol::S_SEND_INVITATION>(Arena*);
template<> ::Protocol::S_SEND_REQUEST* Arena::CreateMaybeMessage<::Protocol::S_SEND_REQUEST>(Arena*);
template<> ::Protocol::S_SHOW_ROOM* Arena::CreateMaybeMessage<::Protocol::S_SHOW_ROOM>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_CREATE_ACCOUNT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CREATE_ACCOUNT) */ {
 public:
  inline C_CREATE_ACCOUNT() : C_CREATE_ACCOUNT(nullptr) {}
  ~C_CREATE_ACCOUNT() override;
  explicit constexpr C_CREATE_ACCOUNT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CREATE_ACCOUNT(const C_CREATE_ACCOUNT& from);
  C_CREATE_ACCOUNT(C_CREATE_ACCOUNT&& from) noexcept
    : C_CREATE_ACCOUNT() {
    *this = ::std::move(from);
  }

  inline C_CREATE_ACCOUNT& operator=(const C_CREATE_ACCOUNT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CREATE_ACCOUNT& operator=(C_CREATE_ACCOUNT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CREATE_ACCOUNT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CREATE_ACCOUNT* internal_default_instance() {
    return reinterpret_cast<const C_CREATE_ACCOUNT*>(
               &_C_CREATE_ACCOUNT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_CREATE_ACCOUNT& a, C_CREATE_ACCOUNT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CREATE_ACCOUNT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CREATE_ACCOUNT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_CREATE_ACCOUNT* New() const final {
    return new C_CREATE_ACCOUNT();
  }

  C_CREATE_ACCOUNT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_CREATE_ACCOUNT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_CREATE_ACCOUNT& from);
  void MergeFrom(const C_CREATE_ACCOUNT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CREATE_ACCOUNT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CREATE_ACCOUNT";
  }
  protected:
  explicit C_CREATE_ACCOUNT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kNicknameFieldNumber = 3,
  };
  // string playerId = 1;
  void clear_playerid();
  const std::string& playerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playerid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // string nickname = 3;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CREATE_ACCOUNT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CREATE_ACCOUNT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CREATE_ACCOUNT) */ {
 public:
  inline S_CREATE_ACCOUNT() : S_CREATE_ACCOUNT(nullptr) {}
  ~S_CREATE_ACCOUNT() override;
  explicit constexpr S_CREATE_ACCOUNT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CREATE_ACCOUNT(const S_CREATE_ACCOUNT& from);
  S_CREATE_ACCOUNT(S_CREATE_ACCOUNT&& from) noexcept
    : S_CREATE_ACCOUNT() {
    *this = ::std::move(from);
  }

  inline S_CREATE_ACCOUNT& operator=(const S_CREATE_ACCOUNT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CREATE_ACCOUNT& operator=(S_CREATE_ACCOUNT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CREATE_ACCOUNT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CREATE_ACCOUNT* internal_default_instance() {
    return reinterpret_cast<const S_CREATE_ACCOUNT*>(
               &_S_CREATE_ACCOUNT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_CREATE_ACCOUNT& a, S_CREATE_ACCOUNT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CREATE_ACCOUNT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CREATE_ACCOUNT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CREATE_ACCOUNT* New() const final {
    return new S_CREATE_ACCOUNT();
  }

  S_CREATE_ACCOUNT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CREATE_ACCOUNT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CREATE_ACCOUNT& from);
  void MergeFrom(const S_CREATE_ACCOUNT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CREATE_ACCOUNT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CREATE_ACCOUNT";
  }
  protected:
  explicit S_CREATE_ACCOUNT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CREATE_ACCOUNT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CHECK_DUPLICATE_ID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CHECK_DUPLICATE_ID) */ {
 public:
  inline C_CHECK_DUPLICATE_ID() : C_CHECK_DUPLICATE_ID(nullptr) {}
  ~C_CHECK_DUPLICATE_ID() override;
  explicit constexpr C_CHECK_DUPLICATE_ID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHECK_DUPLICATE_ID(const C_CHECK_DUPLICATE_ID& from);
  C_CHECK_DUPLICATE_ID(C_CHECK_DUPLICATE_ID&& from) noexcept
    : C_CHECK_DUPLICATE_ID() {
    *this = ::std::move(from);
  }

  inline C_CHECK_DUPLICATE_ID& operator=(const C_CHECK_DUPLICATE_ID& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHECK_DUPLICATE_ID& operator=(C_CHECK_DUPLICATE_ID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHECK_DUPLICATE_ID& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHECK_DUPLICATE_ID* internal_default_instance() {
    return reinterpret_cast<const C_CHECK_DUPLICATE_ID*>(
               &_C_CHECK_DUPLICATE_ID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_CHECK_DUPLICATE_ID& a, C_CHECK_DUPLICATE_ID& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHECK_DUPLICATE_ID* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHECK_DUPLICATE_ID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_CHECK_DUPLICATE_ID* New() const final {
    return new C_CHECK_DUPLICATE_ID();
  }

  C_CHECK_DUPLICATE_ID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_CHECK_DUPLICATE_ID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_CHECK_DUPLICATE_ID& from);
  void MergeFrom(const C_CHECK_DUPLICATE_ID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHECK_DUPLICATE_ID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHECK_DUPLICATE_ID";
  }
  protected:
  explicit C_CHECK_DUPLICATE_ID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // string playerId = 1;
  void clear_playerid();
  const std::string& playerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playerid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CHECK_DUPLICATE_ID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHECK_DUPLICATE_ID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHECK_DUPLICATE_ID) */ {
 public:
  inline S_CHECK_DUPLICATE_ID() : S_CHECK_DUPLICATE_ID(nullptr) {}
  ~S_CHECK_DUPLICATE_ID() override;
  explicit constexpr S_CHECK_DUPLICATE_ID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHECK_DUPLICATE_ID(const S_CHECK_DUPLICATE_ID& from);
  S_CHECK_DUPLICATE_ID(S_CHECK_DUPLICATE_ID&& from) noexcept
    : S_CHECK_DUPLICATE_ID() {
    *this = ::std::move(from);
  }

  inline S_CHECK_DUPLICATE_ID& operator=(const S_CHECK_DUPLICATE_ID& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHECK_DUPLICATE_ID& operator=(S_CHECK_DUPLICATE_ID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHECK_DUPLICATE_ID& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHECK_DUPLICATE_ID* internal_default_instance() {
    return reinterpret_cast<const S_CHECK_DUPLICATE_ID*>(
               &_S_CHECK_DUPLICATE_ID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_CHECK_DUPLICATE_ID& a, S_CHECK_DUPLICATE_ID& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHECK_DUPLICATE_ID* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHECK_DUPLICATE_ID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CHECK_DUPLICATE_ID* New() const final {
    return new S_CHECK_DUPLICATE_ID();
  }

  S_CHECK_DUPLICATE_ID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CHECK_DUPLICATE_ID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CHECK_DUPLICATE_ID& from);
  void MergeFrom(const S_CHECK_DUPLICATE_ID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHECK_DUPLICATE_ID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHECK_DUPLICATE_ID";
  }
  protected:
  explicit S_CHECK_DUPLICATE_ID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDuplicatedFieldNumber = 1,
  };
  // bool duplicated = 1;
  void clear_duplicated();
  bool duplicated() const;
  void set_duplicated(bool value);
  private:
  bool _internal_duplicated() const;
  void _internal_set_duplicated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHECK_DUPLICATE_ID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool duplicated_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LOGIN) */ {
 public:
  inline C_LOGIN() : C_LOGIN(nullptr) {}
  ~C_LOGIN() override;
  explicit constexpr C_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOGIN(const C_LOGIN& from);
  C_LOGIN(C_LOGIN&& from) noexcept
    : C_LOGIN() {
    *this = ::std::move(from);
  }

  inline C_LOGIN& operator=(const C_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOGIN& operator=(C_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C_LOGIN*>(
               &_C_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_LOGIN& a, C_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOGIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_LOGIN* New() const final {
    return new C_LOGIN();
  }

  C_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_LOGIN& from);
  void MergeFrom(const C_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LOGIN";
  }
  protected:
  explicit C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string playerId = 1;
  void clear_playerid();
  const std::string& playerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playerid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGIN) */ {
 public:
  inline S_LOGIN() : S_LOGIN(nullptr) {}
  ~S_LOGIN() override;
  explicit constexpr S_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGIN(const S_LOGIN& from);
  S_LOGIN(S_LOGIN&& from) noexcept
    : S_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_LOGIN& operator=(const S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN& operator=(S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN*>(
               &_S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_LOGIN& a, S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_LOGIN* New() const final {
    return new S_LOGIN();
  }

  S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_LOGIN& from);
  void MergeFrom(const S_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOGIN";
  }
  protected:
  explicit S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 3,
    kRequestsFieldNumber = 4,
    kUserFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // repeated .Protocol.UserInfo friends = 3;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::Protocol::UserInfo* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >*
      mutable_friends();
  private:
  const ::Protocol::UserInfo& _internal_friends(int index) const;
  ::Protocol::UserInfo* _internal_add_friends();
  public:
  const ::Protocol::UserInfo& friends(int index) const;
  ::Protocol::UserInfo* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >&
      friends() const;

  // repeated .Protocol.UserInfo requests = 4;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::Protocol::UserInfo* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >*
      mutable_requests();
  private:
  const ::Protocol::UserInfo& _internal_requests(int index) const;
  ::Protocol::UserInfo* _internal_add_requests();
  public:
  const ::Protocol::UserInfo& requests(int index) const;
  ::Protocol::UserInfo* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >&
      requests() const;

  // optional .Protocol.UserInfo user = 2;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::Protocol::UserInfo& user() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::UserInfo* release_user();
  ::Protocol::UserInfo* mutable_user();
  void set_allocated_user(::Protocol::UserInfo* user);
  private:
  const ::Protocol::UserInfo& _internal_user() const;
  ::Protocol::UserInfo* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::Protocol::UserInfo* user);
  ::Protocol::UserInfo* unsafe_arena_release_user();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo > friends_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo > requests_;
  ::Protocol::UserInfo* user_;
  bool success_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_LOGOUT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LOGOUT) */ {
 public:
  inline C_LOGOUT() : C_LOGOUT(nullptr) {}
  ~C_LOGOUT() override;
  explicit constexpr C_LOGOUT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOGOUT(const C_LOGOUT& from);
  C_LOGOUT(C_LOGOUT&& from) noexcept
    : C_LOGOUT() {
    *this = ::std::move(from);
  }

  inline C_LOGOUT& operator=(const C_LOGOUT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOGOUT& operator=(C_LOGOUT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOGOUT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOGOUT* internal_default_instance() {
    return reinterpret_cast<const C_LOGOUT*>(
               &_C_LOGOUT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_LOGOUT& a, C_LOGOUT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOGOUT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOGOUT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_LOGOUT* New() const final {
    return new C_LOGOUT();
  }

  C_LOGOUT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_LOGOUT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_LOGOUT& from);
  void MergeFrom(const C_LOGOUT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOGOUT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LOGOUT";
  }
  protected:
  explicit C_LOGOUT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // string playerId = 1;
  void clear_playerid();
  const std::string& playerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playerid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_LOGOUT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGOUT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGOUT) */ {
 public:
  inline S_LOGOUT() : S_LOGOUT(nullptr) {}
  ~S_LOGOUT() override;
  explicit constexpr S_LOGOUT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGOUT(const S_LOGOUT& from);
  S_LOGOUT(S_LOGOUT&& from) noexcept
    : S_LOGOUT() {
    *this = ::std::move(from);
  }

  inline S_LOGOUT& operator=(const S_LOGOUT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGOUT& operator=(S_LOGOUT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGOUT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGOUT* internal_default_instance() {
    return reinterpret_cast<const S_LOGOUT*>(
               &_S_LOGOUT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_LOGOUT& a, S_LOGOUT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGOUT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGOUT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_LOGOUT* New() const final {
    return new S_LOGOUT();
  }

  S_LOGOUT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_LOGOUT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_LOGOUT& from);
  void MergeFrom(const S_LOGOUT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGOUT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOGOUT";
  }
  protected:
  explicit S_LOGOUT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // optional .Protocol.UserInfo user = 2;
  bool has_user() const;
  private:
  bool _internal_has_user() const;
  public:
  void clear_user();
  const ::Protocol::UserInfo& user() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::UserInfo* release_user();
  ::Protocol::UserInfo* mutable_user();
  void set_allocated_user(::Protocol::UserInfo* user);
  private:
  const ::Protocol::UserInfo& _internal_user() const;
  ::Protocol::UserInfo* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::Protocol::UserInfo* user);
  ::Protocol::UserInfo* unsafe_arena_release_user();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LOGOUT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Protocol::UserInfo* user_;
  bool success_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_AUTO_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_AUTO_LOGIN) */ {
 public:
  inline C_AUTO_LOGIN() : C_AUTO_LOGIN(nullptr) {}
  ~C_AUTO_LOGIN() override;
  explicit constexpr C_AUTO_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_AUTO_LOGIN(const C_AUTO_LOGIN& from);
  C_AUTO_LOGIN(C_AUTO_LOGIN&& from) noexcept
    : C_AUTO_LOGIN() {
    *this = ::std::move(from);
  }

  inline C_AUTO_LOGIN& operator=(const C_AUTO_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_AUTO_LOGIN& operator=(C_AUTO_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_AUTO_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_AUTO_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C_AUTO_LOGIN*>(
               &_C_AUTO_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C_AUTO_LOGIN& a, C_AUTO_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_AUTO_LOGIN* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_AUTO_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_AUTO_LOGIN* New() const final {
    return new C_AUTO_LOGIN();
  }

  C_AUTO_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_AUTO_LOGIN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_AUTO_LOGIN& from);
  void MergeFrom(const C_AUTO_LOGIN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_AUTO_LOGIN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_AUTO_LOGIN";
  }
  protected:
  explicit C_AUTO_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_AUTO_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ACTIVE_FRIEND final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ACTIVE_FRIEND) */ {
 public:
  inline S_ACTIVE_FRIEND() : S_ACTIVE_FRIEND(nullptr) {}
  ~S_ACTIVE_FRIEND() override;
  explicit constexpr S_ACTIVE_FRIEND(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ACTIVE_FRIEND(const S_ACTIVE_FRIEND& from);
  S_ACTIVE_FRIEND(S_ACTIVE_FRIEND&& from) noexcept
    : S_ACTIVE_FRIEND() {
    *this = ::std::move(from);
  }

  inline S_ACTIVE_FRIEND& operator=(const S_ACTIVE_FRIEND& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ACTIVE_FRIEND& operator=(S_ACTIVE_FRIEND&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ACTIVE_FRIEND& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ACTIVE_FRIEND* internal_default_instance() {
    return reinterpret_cast<const S_ACTIVE_FRIEND*>(
               &_S_ACTIVE_FRIEND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S_ACTIVE_FRIEND& a, S_ACTIVE_FRIEND& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ACTIVE_FRIEND* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ACTIVE_FRIEND* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ACTIVE_FRIEND* New() const final {
    return new S_ACTIVE_FRIEND();
  }

  S_ACTIVE_FRIEND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ACTIVE_FRIEND>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ACTIVE_FRIEND& from);
  void MergeFrom(const S_ACTIVE_FRIEND& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ACTIVE_FRIEND* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ACTIVE_FRIEND";
  }
  protected:
  explicit S_ACTIVE_FRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 1,
    kIsActiveFieldNumber = 2,
  };
  // string nickname = 1;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // bool isActive = 2;
  void clear_isactive();
  bool isactive() const;
  void set_isactive(bool value);
  private:
  bool _internal_isactive() const;
  void _internal_set_isactive(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ACTIVE_FRIEND)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  bool isactive_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_SEND_REQUEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SEND_REQUEST) */ {
 public:
  inline C_SEND_REQUEST() : C_SEND_REQUEST(nullptr) {}
  ~C_SEND_REQUEST() override;
  explicit constexpr C_SEND_REQUEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SEND_REQUEST(const C_SEND_REQUEST& from);
  C_SEND_REQUEST(C_SEND_REQUEST&& from) noexcept
    : C_SEND_REQUEST() {
    *this = ::std::move(from);
  }

  inline C_SEND_REQUEST& operator=(const C_SEND_REQUEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SEND_REQUEST& operator=(C_SEND_REQUEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SEND_REQUEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SEND_REQUEST* internal_default_instance() {
    return reinterpret_cast<const C_SEND_REQUEST*>(
               &_C_SEND_REQUEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C_SEND_REQUEST& a, C_SEND_REQUEST& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SEND_REQUEST* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SEND_REQUEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_SEND_REQUEST* New() const final {
    return new C_SEND_REQUEST();
  }

  C_SEND_REQUEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_SEND_REQUEST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_SEND_REQUEST& from);
  void MergeFrom(const C_SEND_REQUEST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SEND_REQUEST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SEND_REQUEST";
  }
  protected:
  explicit C_SEND_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayeridFieldNumber = 1,
    kFriendNicknameFieldNumber = 2,
  };
  // string playerid = 1;
  void clear_playerid();
  const std::string& playerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playerid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // string friendNickname = 2;
  void clear_friendnickname();
  const std::string& friendnickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_friendnickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_friendnickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_friendnickname();
  void set_allocated_friendnickname(std::string* friendnickname);
  private:
  const std::string& _internal_friendnickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friendnickname(const std::string& value);
  std::string* _internal_mutable_friendnickname();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SEND_REQUEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friendnickname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SEND_REQUEST final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SEND_REQUEST) */ {
 public:
  inline S_SEND_REQUEST() : S_SEND_REQUEST(nullptr) {}
  ~S_SEND_REQUEST() override;
  explicit constexpr S_SEND_REQUEST(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SEND_REQUEST(const S_SEND_REQUEST& from);
  S_SEND_REQUEST(S_SEND_REQUEST&& from) noexcept
    : S_SEND_REQUEST() {
    *this = ::std::move(from);
  }

  inline S_SEND_REQUEST& operator=(const S_SEND_REQUEST& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SEND_REQUEST& operator=(S_SEND_REQUEST&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SEND_REQUEST& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SEND_REQUEST* internal_default_instance() {
    return reinterpret_cast<const S_SEND_REQUEST*>(
               &_S_SEND_REQUEST_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_SEND_REQUEST& a, S_SEND_REQUEST& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SEND_REQUEST* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SEND_REQUEST* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_SEND_REQUEST* New() const final {
    return new S_SEND_REQUEST();
  }

  S_SEND_REQUEST* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_SEND_REQUEST>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_SEND_REQUEST& from);
  void MergeFrom(const S_SEND_REQUEST& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SEND_REQUEST* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SEND_REQUEST";
  }
  protected:
  explicit S_SEND_REQUEST(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayeridFieldNumber = 1,
    kFriendNicknameFieldNumber = 2,
  };
  // string playerid = 1;
  void clear_playerid();
  const std::string& playerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playerid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // string friendNickname = 2;
  void clear_friendnickname();
  const std::string& friendnickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_friendnickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_friendnickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_friendnickname();
  void set_allocated_friendnickname(std::string* friendnickname);
  private:
  const std::string& _internal_friendnickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friendnickname(const std::string& value);
  std::string* _internal_mutable_friendnickname();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SEND_REQUEST)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friendnickname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ADD_FRIEND final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ADD_FRIEND) */ {
 public:
  inline C_ADD_FRIEND() : C_ADD_FRIEND(nullptr) {}
  ~C_ADD_FRIEND() override;
  explicit constexpr C_ADD_FRIEND(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ADD_FRIEND(const C_ADD_FRIEND& from);
  C_ADD_FRIEND(C_ADD_FRIEND&& from) noexcept
    : C_ADD_FRIEND() {
    *this = ::std::move(from);
  }

  inline C_ADD_FRIEND& operator=(const C_ADD_FRIEND& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ADD_FRIEND& operator=(C_ADD_FRIEND&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ADD_FRIEND& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ADD_FRIEND* internal_default_instance() {
    return reinterpret_cast<const C_ADD_FRIEND*>(
               &_C_ADD_FRIEND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(C_ADD_FRIEND& a, C_ADD_FRIEND& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ADD_FRIEND* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ADD_FRIEND* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ADD_FRIEND* New() const final {
    return new C_ADD_FRIEND();
  }

  C_ADD_FRIEND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ADD_FRIEND>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ADD_FRIEND& from);
  void MergeFrom(const C_ADD_FRIEND& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ADD_FRIEND* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ADD_FRIEND";
  }
  protected:
  explicit C_ADD_FRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyIdFieldNumber = 1,
    kFriendIdFieldNumber = 2,
    kApproveFieldNumber = 3,
  };
  // string myId = 1;
  void clear_myid();
  const std::string& myid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_myid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_myid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_myid();
  void set_allocated_myid(std::string* myid);
  private:
  const std::string& _internal_myid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_myid(const std::string& value);
  std::string* _internal_mutable_myid();
  public:

  // string friendId = 2;
  void clear_friendid();
  const std::string& friendid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_friendid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_friendid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_friendid();
  void set_allocated_friendid(std::string* friendid);
  private:
  const std::string& _internal_friendid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friendid(const std::string& value);
  std::string* _internal_mutable_friendid();
  public:

  // bool approve = 3;
  void clear_approve();
  bool approve() const;
  void set_approve(bool value);
  private:
  bool _internal_approve() const;
  void _internal_set_approve(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ADD_FRIEND)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr myid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friendid_;
  bool approve_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ADD_FRIEND final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ADD_FRIEND) */ {
 public:
  inline S_ADD_FRIEND() : S_ADD_FRIEND(nullptr) {}
  ~S_ADD_FRIEND() override;
  explicit constexpr S_ADD_FRIEND(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ADD_FRIEND(const S_ADD_FRIEND& from);
  S_ADD_FRIEND(S_ADD_FRIEND&& from) noexcept
    : S_ADD_FRIEND() {
    *this = ::std::move(from);
  }

  inline S_ADD_FRIEND& operator=(const S_ADD_FRIEND& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ADD_FRIEND& operator=(S_ADD_FRIEND&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ADD_FRIEND& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ADD_FRIEND* internal_default_instance() {
    return reinterpret_cast<const S_ADD_FRIEND*>(
               &_S_ADD_FRIEND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_ADD_FRIEND& a, S_ADD_FRIEND& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ADD_FRIEND* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ADD_FRIEND* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ADD_FRIEND* New() const final {
    return new S_ADD_FRIEND();
  }

  S_ADD_FRIEND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ADD_FRIEND>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ADD_FRIEND& from);
  void MergeFrom(const S_ADD_FRIEND& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ADD_FRIEND* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ADD_FRIEND";
  }
  protected:
  explicit S_ADD_FRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendInfoFieldNumber = 1,
    kApproveFieldNumber = 2,
  };
  // .Protocol.UserInfo friendInfo = 1;
  bool has_friendinfo() const;
  private:
  bool _internal_has_friendinfo() const;
  public:
  void clear_friendinfo();
  const ::Protocol::UserInfo& friendinfo() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::UserInfo* release_friendinfo();
  ::Protocol::UserInfo* mutable_friendinfo();
  void set_allocated_friendinfo(::Protocol::UserInfo* friendinfo);
  private:
  const ::Protocol::UserInfo& _internal_friendinfo() const;
  ::Protocol::UserInfo* _internal_mutable_friendinfo();
  public:
  void unsafe_arena_set_allocated_friendinfo(
      ::Protocol::UserInfo* friendinfo);
  ::Protocol::UserInfo* unsafe_arena_release_friendinfo();

  // bool approve = 2;
  void clear_approve();
  bool approve() const;
  void set_approve(bool value);
  private:
  bool _internal_approve() const;
  void _internal_set_approve(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ADD_FRIEND)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::UserInfo* friendinfo_;
  bool approve_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CHECK_FRIEND final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CHECK_FRIEND) */ {
 public:
  inline C_CHECK_FRIEND() : C_CHECK_FRIEND(nullptr) {}
  ~C_CHECK_FRIEND() override;
  explicit constexpr C_CHECK_FRIEND(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHECK_FRIEND(const C_CHECK_FRIEND& from);
  C_CHECK_FRIEND(C_CHECK_FRIEND&& from) noexcept
    : C_CHECK_FRIEND() {
    *this = ::std::move(from);
  }

  inline C_CHECK_FRIEND& operator=(const C_CHECK_FRIEND& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHECK_FRIEND& operator=(C_CHECK_FRIEND&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHECK_FRIEND& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHECK_FRIEND* internal_default_instance() {
    return reinterpret_cast<const C_CHECK_FRIEND*>(
               &_C_CHECK_FRIEND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(C_CHECK_FRIEND& a, C_CHECK_FRIEND& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHECK_FRIEND* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHECK_FRIEND* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_CHECK_FRIEND* New() const final {
    return new C_CHECK_FRIEND();
  }

  C_CHECK_FRIEND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_CHECK_FRIEND>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_CHECK_FRIEND& from);
  void MergeFrom(const C_CHECK_FRIEND& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHECK_FRIEND* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHECK_FRIEND";
  }
  protected:
  explicit C_CHECK_FRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyNicknameFieldNumber = 1,
    kRequestNicknameFieldNumber = 2,
  };
  // string myNickname = 1;
  void clear_mynickname();
  const std::string& mynickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mynickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mynickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_mynickname();
  void set_allocated_mynickname(std::string* mynickname);
  private:
  const std::string& _internal_mynickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mynickname(const std::string& value);
  std::string* _internal_mutable_mynickname();
  public:

  // string requestNickname = 2;
  void clear_requestnickname();
  const std::string& requestnickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_requestnickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_requestnickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_requestnickname();
  void set_allocated_requestnickname(std::string* requestnickname);
  private:
  const std::string& _internal_requestnickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_requestnickname(const std::string& value);
  std::string* _internal_mutable_requestnickname();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CHECK_FRIEND)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mynickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr requestnickname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHECK_FRIEND final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHECK_FRIEND) */ {
 public:
  inline S_CHECK_FRIEND() : S_CHECK_FRIEND(nullptr) {}
  ~S_CHECK_FRIEND() override;
  explicit constexpr S_CHECK_FRIEND(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHECK_FRIEND(const S_CHECK_FRIEND& from);
  S_CHECK_FRIEND(S_CHECK_FRIEND&& from) noexcept
    : S_CHECK_FRIEND() {
    *this = ::std::move(from);
  }

  inline S_CHECK_FRIEND& operator=(const S_CHECK_FRIEND& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHECK_FRIEND& operator=(S_CHECK_FRIEND&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHECK_FRIEND& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHECK_FRIEND* internal_default_instance() {
    return reinterpret_cast<const S_CHECK_FRIEND*>(
               &_S_CHECK_FRIEND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S_CHECK_FRIEND& a, S_CHECK_FRIEND& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHECK_FRIEND* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHECK_FRIEND* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CHECK_FRIEND* New() const final {
    return new S_CHECK_FRIEND();
  }

  S_CHECK_FRIEND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CHECK_FRIEND>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CHECK_FRIEND& from);
  void MergeFrom(const S_CHECK_FRIEND& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHECK_FRIEND* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHECK_FRIEND";
  }
  protected:
  explicit S_CHECK_FRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kPlayerNicknameFieldNumber = 2,
  };
  // repeated int32 success = 1;
  int success_size() const;
  private:
  int _internal_success_size() const;
  public:
  void clear_success();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_success(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_success() const;
  void _internal_add_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_success();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 success(int index) const;
  void set_success(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_success(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      success() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_success();

  // repeated string playerNickname = 2;
  int playernickname_size() const;
  private:
  int _internal_playernickname_size() const;
  public:
  void clear_playernickname();
  const std::string& playernickname(int index) const;
  std::string* mutable_playernickname(int index);
  void set_playernickname(int index, const std::string& value);
  void set_playernickname(int index, std::string&& value);
  void set_playernickname(int index, const char* value);
  void set_playernickname(int index, const char* value, size_t size);
  std::string* add_playernickname();
  void add_playernickname(const std::string& value);
  void add_playernickname(std::string&& value);
  void add_playernickname(const char* value);
  void add_playernickname(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& playernickname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_playernickname();
  private:
  const std::string& _internal_playernickname(int index) const;
  std::string* _internal_add_playernickname();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHECK_FRIEND)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > success_;
  mutable std::atomic<int> _success_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> playernickname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_GET_FRIEND final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_GET_FRIEND) */ {
 public:
  inline C_GET_FRIEND() : C_GET_FRIEND(nullptr) {}
  ~C_GET_FRIEND() override;
  explicit constexpr C_GET_FRIEND(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_GET_FRIEND(const C_GET_FRIEND& from);
  C_GET_FRIEND(C_GET_FRIEND&& from) noexcept
    : C_GET_FRIEND() {
    *this = ::std::move(from);
  }

  inline C_GET_FRIEND& operator=(const C_GET_FRIEND& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_GET_FRIEND& operator=(C_GET_FRIEND&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_GET_FRIEND& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_GET_FRIEND* internal_default_instance() {
    return reinterpret_cast<const C_GET_FRIEND*>(
               &_C_GET_FRIEND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(C_GET_FRIEND& a, C_GET_FRIEND& b) {
    a.Swap(&b);
  }
  inline void Swap(C_GET_FRIEND* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_GET_FRIEND* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_GET_FRIEND* New() const final {
    return new C_GET_FRIEND();
  }

  C_GET_FRIEND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_GET_FRIEND>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_GET_FRIEND& from);
  void MergeFrom(const C_GET_FRIEND& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_GET_FRIEND* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_GET_FRIEND";
  }
  protected:
  explicit C_GET_FRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // string playerId = 1;
  void clear_playerid();
  const std::string& playerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playerid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_GET_FRIEND)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_GET_FRIEND final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_GET_FRIEND) */ {
 public:
  inline S_GET_FRIEND() : S_GET_FRIEND(nullptr) {}
  ~S_GET_FRIEND() override;
  explicit constexpr S_GET_FRIEND(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_GET_FRIEND(const S_GET_FRIEND& from);
  S_GET_FRIEND(S_GET_FRIEND&& from) noexcept
    : S_GET_FRIEND() {
    *this = ::std::move(from);
  }

  inline S_GET_FRIEND& operator=(const S_GET_FRIEND& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_GET_FRIEND& operator=(S_GET_FRIEND&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_GET_FRIEND& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_GET_FRIEND* internal_default_instance() {
    return reinterpret_cast<const S_GET_FRIEND*>(
               &_S_GET_FRIEND_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S_GET_FRIEND& a, S_GET_FRIEND& b) {
    a.Swap(&b);
  }
  inline void Swap(S_GET_FRIEND* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_GET_FRIEND* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_GET_FRIEND* New() const final {
    return new S_GET_FRIEND();
  }

  S_GET_FRIEND* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_GET_FRIEND>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_GET_FRIEND& from);
  void MergeFrom(const S_GET_FRIEND& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_GET_FRIEND* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_GET_FRIEND";
  }
  protected:
  explicit S_GET_FRIEND(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendsFieldNumber = 1,
  };
  // repeated .Protocol.UserInfo friends = 1;
  int friends_size() const;
  private:
  int _internal_friends_size() const;
  public:
  void clear_friends();
  ::Protocol::UserInfo* mutable_friends(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >*
      mutable_friends();
  private:
  const ::Protocol::UserInfo& _internal_friends(int index) const;
  ::Protocol::UserInfo* _internal_add_friends();
  public:
  const ::Protocol::UserInfo& friends(int index) const;
  ::Protocol::UserInfo* add_friends();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >&
      friends() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_GET_FRIEND)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo > friends_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_GET_REQUESTS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_GET_REQUESTS) */ {
 public:
  inline C_GET_REQUESTS() : C_GET_REQUESTS(nullptr) {}
  ~C_GET_REQUESTS() override;
  explicit constexpr C_GET_REQUESTS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_GET_REQUESTS(const C_GET_REQUESTS& from);
  C_GET_REQUESTS(C_GET_REQUESTS&& from) noexcept
    : C_GET_REQUESTS() {
    *this = ::std::move(from);
  }

  inline C_GET_REQUESTS& operator=(const C_GET_REQUESTS& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_GET_REQUESTS& operator=(C_GET_REQUESTS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_GET_REQUESTS& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_GET_REQUESTS* internal_default_instance() {
    return reinterpret_cast<const C_GET_REQUESTS*>(
               &_C_GET_REQUESTS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(C_GET_REQUESTS& a, C_GET_REQUESTS& b) {
    a.Swap(&b);
  }
  inline void Swap(C_GET_REQUESTS* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_GET_REQUESTS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_GET_REQUESTS* New() const final {
    return new C_GET_REQUESTS();
  }

  C_GET_REQUESTS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_GET_REQUESTS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_GET_REQUESTS& from);
  void MergeFrom(const C_GET_REQUESTS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_GET_REQUESTS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_GET_REQUESTS";
  }
  protected:
  explicit C_GET_REQUESTS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // string playerId = 1;
  void clear_playerid();
  const std::string& playerid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_playerid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_playerid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_playerid();
  void set_allocated_playerid(std::string* playerid);
  private:
  const std::string& _internal_playerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_playerid(const std::string& value);
  std::string* _internal_mutable_playerid();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_GET_REQUESTS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_GET_REQUESTS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_GET_REQUESTS) */ {
 public:
  inline S_GET_REQUESTS() : S_GET_REQUESTS(nullptr) {}
  ~S_GET_REQUESTS() override;
  explicit constexpr S_GET_REQUESTS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_GET_REQUESTS(const S_GET_REQUESTS& from);
  S_GET_REQUESTS(S_GET_REQUESTS&& from) noexcept
    : S_GET_REQUESTS() {
    *this = ::std::move(from);
  }

  inline S_GET_REQUESTS& operator=(const S_GET_REQUESTS& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_GET_REQUESTS& operator=(S_GET_REQUESTS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_GET_REQUESTS& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_GET_REQUESTS* internal_default_instance() {
    return reinterpret_cast<const S_GET_REQUESTS*>(
               &_S_GET_REQUESTS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S_GET_REQUESTS& a, S_GET_REQUESTS& b) {
    a.Swap(&b);
  }
  inline void Swap(S_GET_REQUESTS* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_GET_REQUESTS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_GET_REQUESTS* New() const final {
    return new S_GET_REQUESTS();
  }

  S_GET_REQUESTS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_GET_REQUESTS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_GET_REQUESTS& from);
  void MergeFrom(const S_GET_REQUESTS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_GET_REQUESTS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_GET_REQUESTS";
  }
  protected:
  explicit S_GET_REQUESTS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 1,
  };
  // repeated .Protocol.UserInfo requests = 1;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::Protocol::UserInfo* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >*
      mutable_requests();
  private:
  const ::Protocol::UserInfo& _internal_requests(int index) const;
  ::Protocol::UserInfo* _internal_add_requests();
  public:
  const ::Protocol::UserInfo& requests(int index) const;
  ::Protocol::UserInfo* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >&
      requests() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_GET_REQUESTS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo > requests_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CREATE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CREATE_ROOM) */ {
 public:
  inline C_CREATE_ROOM() : C_CREATE_ROOM(nullptr) {}
  ~C_CREATE_ROOM() override;
  explicit constexpr C_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CREATE_ROOM(const C_CREATE_ROOM& from);
  C_CREATE_ROOM(C_CREATE_ROOM&& from) noexcept
    : C_CREATE_ROOM() {
    *this = ::std::move(from);
  }

  inline C_CREATE_ROOM& operator=(const C_CREATE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CREATE_ROOM& operator=(C_CREATE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CREATE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CREATE_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_CREATE_ROOM*>(
               &_C_CREATE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(C_CREATE_ROOM& a, C_CREATE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CREATE_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CREATE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_CREATE_ROOM* New() const final {
    return new C_CREATE_ROOM();
  }

  C_CREATE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_CREATE_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_CREATE_ROOM& from);
  void MergeFrom(const C_CREATE_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CREATE_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CREATE_ROOM";
  }
  protected:
  explicit C_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CREATE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CREATE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CREATE_ROOM) */ {
 public:
  inline S_CREATE_ROOM() : S_CREATE_ROOM(nullptr) {}
  ~S_CREATE_ROOM() override;
  explicit constexpr S_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CREATE_ROOM(const S_CREATE_ROOM& from);
  S_CREATE_ROOM(S_CREATE_ROOM&& from) noexcept
    : S_CREATE_ROOM() {
    *this = ::std::move(from);
  }

  inline S_CREATE_ROOM& operator=(const S_CREATE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CREATE_ROOM& operator=(S_CREATE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CREATE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CREATE_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_CREATE_ROOM*>(
               &_S_CREATE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(S_CREATE_ROOM& a, S_CREATE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CREATE_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CREATE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CREATE_ROOM* New() const final {
    return new S_CREATE_ROOM();
  }

  S_CREATE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CREATE_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CREATE_ROOM& from);
  void MergeFrom(const S_CREATE_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CREATE_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CREATE_ROOM";
  }
  protected:
  explicit S_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNumFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // uint64 roomNum = 2;
  void clear_roomnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomnum() const;
  void set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomnum() const;
  void _internal_set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CREATE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomnum_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_SHOW_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SHOW_ROOM) */ {
 public:
  inline C_SHOW_ROOM() : C_SHOW_ROOM(nullptr) {}
  ~C_SHOW_ROOM() override;
  explicit constexpr C_SHOW_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SHOW_ROOM(const C_SHOW_ROOM& from);
  C_SHOW_ROOM(C_SHOW_ROOM&& from) noexcept
    : C_SHOW_ROOM() {
    *this = ::std::move(from);
  }

  inline C_SHOW_ROOM& operator=(const C_SHOW_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SHOW_ROOM& operator=(C_SHOW_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SHOW_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SHOW_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_SHOW_ROOM*>(
               &_C_SHOW_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(C_SHOW_ROOM& a, C_SHOW_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SHOW_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SHOW_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_SHOW_ROOM* New() const final {
    return new C_SHOW_ROOM();
  }

  C_SHOW_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_SHOW_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_SHOW_ROOM& from);
  void MergeFrom(const C_SHOW_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SHOW_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SHOW_ROOM";
  }
  protected:
  explicit C_SHOW_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNumFieldNumber = 1,
  };
  // uint64 roomNum = 1;
  void clear_roomnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomnum() const;
  void set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomnum() const;
  void _internal_set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SHOW_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SHOW_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SHOW_ROOM) */ {
 public:
  inline S_SHOW_ROOM() : S_SHOW_ROOM(nullptr) {}
  ~S_SHOW_ROOM() override;
  explicit constexpr S_SHOW_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SHOW_ROOM(const S_SHOW_ROOM& from);
  S_SHOW_ROOM(S_SHOW_ROOM&& from) noexcept
    : S_SHOW_ROOM() {
    *this = ::std::move(from);
  }

  inline S_SHOW_ROOM& operator=(const S_SHOW_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SHOW_ROOM& operator=(S_SHOW_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SHOW_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SHOW_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_SHOW_ROOM*>(
               &_S_SHOW_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(S_SHOW_ROOM& a, S_SHOW_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SHOW_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SHOW_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_SHOW_ROOM* New() const final {
    return new S_SHOW_ROOM();
  }

  S_SHOW_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_SHOW_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_SHOW_ROOM& from);
  void MergeFrom(const S_SHOW_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SHOW_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SHOW_ROOM";
  }
  protected:
  explicit S_SHOW_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNumsFieldNumber = 1,
    kHostNicknameFieldNumber = 2,
  };
  // repeated uint64 roomNums = 1;
  int roomnums_size() const;
  private:
  int _internal_roomnums_size() const;
  public:
  void clear_roomnums();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomnums(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_roomnums() const;
  void _internal_add_roomnums(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_roomnums();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 roomnums(int index) const;
  void set_roomnums(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_roomnums(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      roomnums() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_roomnums();

  // repeated string hostNickname = 2;
  int hostnickname_size() const;
  private:
  int _internal_hostnickname_size() const;
  public:
  void clear_hostnickname();
  const std::string& hostnickname(int index) const;
  std::string* mutable_hostnickname(int index);
  void set_hostnickname(int index, const std::string& value);
  void set_hostnickname(int index, std::string&& value);
  void set_hostnickname(int index, const char* value);
  void set_hostnickname(int index, const char* value, size_t size);
  std::string* add_hostnickname();
  void add_hostnickname(const std::string& value);
  void add_hostnickname(std::string&& value);
  void add_hostnickname(const char* value);
  void add_hostnickname(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hostnickname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hostnickname();
  private:
  const std::string& _internal_hostnickname(int index) const;
  std::string* _internal_add_hostnickname();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SHOW_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > roomnums_;
  mutable std::atomic<int> _roomnums_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hostnickname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_JOIN_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_JOIN_ROOM) */ {
 public:
  inline C_JOIN_ROOM() : C_JOIN_ROOM(nullptr) {}
  ~C_JOIN_ROOM() override;
  explicit constexpr C_JOIN_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_JOIN_ROOM(const C_JOIN_ROOM& from);
  C_JOIN_ROOM(C_JOIN_ROOM&& from) noexcept
    : C_JOIN_ROOM() {
    *this = ::std::move(from);
  }

  inline C_JOIN_ROOM& operator=(const C_JOIN_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_JOIN_ROOM& operator=(C_JOIN_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_JOIN_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_JOIN_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_JOIN_ROOM*>(
               &_C_JOIN_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(C_JOIN_ROOM& a, C_JOIN_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_JOIN_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_JOIN_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_JOIN_ROOM* New() const final {
    return new C_JOIN_ROOM();
  }

  C_JOIN_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_JOIN_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_JOIN_ROOM& from);
  void MergeFrom(const C_JOIN_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_JOIN_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_JOIN_ROOM";
  }
  protected:
  explicit C_JOIN_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNumFieldNumber = 1,
  };
  // uint64 roomNum = 1;
  void clear_roomnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomnum() const;
  void set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomnum() const;
  void _internal_set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_JOIN_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_JOIN_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_JOIN_ROOM) */ {
 public:
  inline S_JOIN_ROOM() : S_JOIN_ROOM(nullptr) {}
  ~S_JOIN_ROOM() override;
  explicit constexpr S_JOIN_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_JOIN_ROOM(const S_JOIN_ROOM& from);
  S_JOIN_ROOM(S_JOIN_ROOM&& from) noexcept
    : S_JOIN_ROOM() {
    *this = ::std::move(from);
  }

  inline S_JOIN_ROOM& operator=(const S_JOIN_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_JOIN_ROOM& operator=(S_JOIN_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_JOIN_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_JOIN_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_JOIN_ROOM*>(
               &_S_JOIN_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(S_JOIN_ROOM& a, S_JOIN_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_JOIN_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_JOIN_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_JOIN_ROOM* New() const final {
    return new S_JOIN_ROOM();
  }

  S_JOIN_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_JOIN_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_JOIN_ROOM& from);
  void MergeFrom(const S_JOIN_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_JOIN_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_JOIN_ROOM";
  }
  protected:
  explicit S_JOIN_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kRoomNumFieldNumber = 2,
    kSuccessFieldNumber = 3,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint64 roomNum = 2;
  void clear_roomnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomnum() const;
  void set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomnum() const;
  void _internal_set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool success = 3;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_JOIN_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomnum_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_LEAVE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LEAVE_ROOM) */ {
 public:
  inline C_LEAVE_ROOM() : C_LEAVE_ROOM(nullptr) {}
  ~C_LEAVE_ROOM() override;
  explicit constexpr C_LEAVE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LEAVE_ROOM(const C_LEAVE_ROOM& from);
  C_LEAVE_ROOM(C_LEAVE_ROOM&& from) noexcept
    : C_LEAVE_ROOM() {
    *this = ::std::move(from);
  }

  inline C_LEAVE_ROOM& operator=(const C_LEAVE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LEAVE_ROOM& operator=(C_LEAVE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LEAVE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LEAVE_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_LEAVE_ROOM*>(
               &_C_LEAVE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(C_LEAVE_ROOM& a, C_LEAVE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LEAVE_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LEAVE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_LEAVE_ROOM* New() const final {
    return new C_LEAVE_ROOM();
  }

  C_LEAVE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_LEAVE_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_LEAVE_ROOM& from);
  void MergeFrom(const C_LEAVE_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LEAVE_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LEAVE_ROOM";
  }
  protected:
  explicit C_LEAVE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNumFieldNumber = 1,
  };
  // uint64 roomNum = 1;
  void clear_roomnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomnum() const;
  void set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomnum() const;
  void _internal_set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_LEAVE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LEAVE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LEAVE_ROOM) */ {
 public:
  inline S_LEAVE_ROOM() : S_LEAVE_ROOM(nullptr) {}
  ~S_LEAVE_ROOM() override;
  explicit constexpr S_LEAVE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LEAVE_ROOM(const S_LEAVE_ROOM& from);
  S_LEAVE_ROOM(S_LEAVE_ROOM&& from) noexcept
    : S_LEAVE_ROOM() {
    *this = ::std::move(from);
  }

  inline S_LEAVE_ROOM& operator=(const S_LEAVE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LEAVE_ROOM& operator=(S_LEAVE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LEAVE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LEAVE_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_LEAVE_ROOM*>(
               &_S_LEAVE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(S_LEAVE_ROOM& a, S_LEAVE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LEAVE_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LEAVE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_LEAVE_ROOM* New() const final {
    return new S_LEAVE_ROOM();
  }

  S_LEAVE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_LEAVE_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_LEAVE_ROOM& from);
  void MergeFrom(const S_LEAVE_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LEAVE_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LEAVE_ROOM";
  }
  protected:
  explicit S_LEAVE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.S_LEAVE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_DESTROY_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_DESTROY_ROOM) */ {
 public:
  inline C_DESTROY_ROOM() : C_DESTROY_ROOM(nullptr) {}
  ~C_DESTROY_ROOM() override;
  explicit constexpr C_DESTROY_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_DESTROY_ROOM(const C_DESTROY_ROOM& from);
  C_DESTROY_ROOM(C_DESTROY_ROOM&& from) noexcept
    : C_DESTROY_ROOM() {
    *this = ::std::move(from);
  }

  inline C_DESTROY_ROOM& operator=(const C_DESTROY_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_DESTROY_ROOM& operator=(C_DESTROY_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_DESTROY_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_DESTROY_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_DESTROY_ROOM*>(
               &_C_DESTROY_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(C_DESTROY_ROOM& a, C_DESTROY_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_DESTROY_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_DESTROY_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_DESTROY_ROOM* New() const final {
    return new C_DESTROY_ROOM();
  }

  C_DESTROY_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_DESTROY_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_DESTROY_ROOM& from);
  void MergeFrom(const C_DESTROY_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_DESTROY_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_DESTROY_ROOM";
  }
  protected:
  explicit C_DESTROY_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNumFieldNumber = 1,
  };
  // uint64 roomNum = 1;
  void clear_roomnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomnum() const;
  void set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomnum() const;
  void _internal_set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_DESTROY_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_DESTROY_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DESTROY_ROOM) */ {
 public:
  inline S_DESTROY_ROOM() : S_DESTROY_ROOM(nullptr) {}
  ~S_DESTROY_ROOM() override;
  explicit constexpr S_DESTROY_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DESTROY_ROOM(const S_DESTROY_ROOM& from);
  S_DESTROY_ROOM(S_DESTROY_ROOM&& from) noexcept
    : S_DESTROY_ROOM() {
    *this = ::std::move(from);
  }

  inline S_DESTROY_ROOM& operator=(const S_DESTROY_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DESTROY_ROOM& operator=(S_DESTROY_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DESTROY_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DESTROY_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_DESTROY_ROOM*>(
               &_S_DESTROY_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(S_DESTROY_ROOM& a, S_DESTROY_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DESTROY_ROOM* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DESTROY_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_DESTROY_ROOM* New() const final {
    return new S_DESTROY_ROOM();
  }

  S_DESTROY_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_DESTROY_ROOM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_DESTROY_ROOM& from);
  void MergeFrom(const S_DESTROY_ROOM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DESTROY_ROOM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DESTROY_ROOM";
  }
  protected:
  explicit S_DESTROY_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_DESTROY_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_SEND_INVITATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_SEND_INVITATION) */ {
 public:
  inline C_SEND_INVITATION() : C_SEND_INVITATION(nullptr) {}
  ~C_SEND_INVITATION() override;
  explicit constexpr C_SEND_INVITATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_SEND_INVITATION(const C_SEND_INVITATION& from);
  C_SEND_INVITATION(C_SEND_INVITATION&& from) noexcept
    : C_SEND_INVITATION() {
    *this = ::std::move(from);
  }

  inline C_SEND_INVITATION& operator=(const C_SEND_INVITATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SEND_INVITATION& operator=(C_SEND_INVITATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_SEND_INVITATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_SEND_INVITATION* internal_default_instance() {
    return reinterpret_cast<const C_SEND_INVITATION*>(
               &_C_SEND_INVITATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(C_SEND_INVITATION& a, C_SEND_INVITATION& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SEND_INVITATION* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SEND_INVITATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_SEND_INVITATION* New() const final {
    return new C_SEND_INVITATION();
  }

  C_SEND_INVITATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_SEND_INVITATION>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_SEND_INVITATION& from);
  void MergeFrom(const C_SEND_INVITATION& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SEND_INVITATION* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_SEND_INVITATION";
  }
  protected:
  explicit C_SEND_INVITATION(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFriendNicknameFieldNumber = 1,
    kRoomNumFieldNumber = 2,
  };
  // string friendNickname = 1;
  void clear_friendnickname();
  const std::string& friendnickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_friendnickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_friendnickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_friendnickname();
  void set_allocated_friendnickname(std::string* friendnickname);
  private:
  const std::string& _internal_friendnickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_friendnickname(const std::string& value);
  std::string* _internal_mutable_friendnickname();
  public:

  // uint64 roomNum = 2;
  void clear_roomnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomnum() const;
  void set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomnum() const;
  void _internal_set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_SEND_INVITATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr friendnickname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SEND_INVITATION final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SEND_INVITATION) */ {
 public:
  inline S_SEND_INVITATION() : S_SEND_INVITATION(nullptr) {}
  ~S_SEND_INVITATION() override;
  explicit constexpr S_SEND_INVITATION(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SEND_INVITATION(const S_SEND_INVITATION& from);
  S_SEND_INVITATION(S_SEND_INVITATION&& from) noexcept
    : S_SEND_INVITATION() {
    *this = ::std::move(from);
  }

  inline S_SEND_INVITATION& operator=(const S_SEND_INVITATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SEND_INVITATION& operator=(S_SEND_INVITATION&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SEND_INVITATION& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SEND_INVITATION* internal_default_instance() {
    return reinterpret_cast<const S_SEND_INVITATION*>(
               &_S_SEND_INVITATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(S_SEND_INVITATION& a, S_SEND_INVITATION& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SEND_INVITATION* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SEND_INVITATION* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_SEND_INVITATION* New() const final {
    return new S_SEND_INVITATION();
  }

  S_SEND_INVITATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_SEND_INVITATION>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_SEND_INVITATION& from);
  void MergeFrom(const S_SEND_INVITATION& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SEND_INVITATION* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SEND_INVITATION";
  }
  protected:
  explicit S_SEND_INVITATION(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMyNicknameFieldNumber = 2,
    kRoomNumFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // optional string myNickname = 2;
  bool has_mynickname() const;
  private:
  bool _internal_has_mynickname() const;
  public:
  void clear_mynickname();
  const std::string& mynickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mynickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mynickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_mynickname();
  void set_allocated_mynickname(std::string* mynickname);
  private:
  const std::string& _internal_mynickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mynickname(const std::string& value);
  std::string* _internal_mutable_mynickname();
  public:

  // optional uint64 roomNum = 3;
  bool has_roomnum() const;
  private:
  bool _internal_has_roomnum() const;
  public:
  void clear_roomnum();
  ::PROTOBUF_NAMESPACE_ID::uint64 roomnum() const;
  void set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_roomnum() const;
  void _internal_set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_SEND_INVITATION)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mynickname_;
  ::PROTOBUF_NAMESPACE_ID::uint64 roomnum_;
  bool success_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ENTER_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ENTER_GAME) */ {
 public:
  inline C_ENTER_GAME() : C_ENTER_GAME(nullptr) {}
  ~C_ENTER_GAME() override;
  explicit constexpr C_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ENTER_GAME(const C_ENTER_GAME& from);
  C_ENTER_GAME(C_ENTER_GAME&& from) noexcept
    : C_ENTER_GAME() {
    *this = ::std::move(from);
  }

  inline C_ENTER_GAME& operator=(const C_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ENTER_GAME& operator=(C_ENTER_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ENTER_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ENTER_GAME* internal_default_instance() {
    return reinterpret_cast<const C_ENTER_GAME*>(
               &_C_ENTER_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(C_ENTER_GAME& a, C_ENTER_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ENTER_GAME* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ENTER_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_ENTER_GAME* New() const final {
    return new C_ENTER_GAME();
  }

  C_ENTER_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_ENTER_GAME>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_ENTER_GAME& from);
  void MergeFrom(const C_ENTER_GAME& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ENTER_GAME* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ENTER_GAME";
  }
  protected:
  explicit C_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
  };
  // uint64 playerIndex = 1;
  void clear_playerindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 playerindex() const;
  void set_playerindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_playerindex() const;
  void _internal_set_playerindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ENTER_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 playerindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ENTER_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ENTER_GAME) */ {
 public:
  inline S_ENTER_GAME() : S_ENTER_GAME(nullptr) {}
  ~S_ENTER_GAME() override;
  explicit constexpr S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ENTER_GAME(const S_ENTER_GAME& from);
  S_ENTER_GAME(S_ENTER_GAME&& from) noexcept
    : S_ENTER_GAME() {
    *this = ::std::move(from);
  }

  inline S_ENTER_GAME& operator=(const S_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ENTER_GAME& operator=(S_ENTER_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ENTER_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ENTER_GAME* internal_default_instance() {
    return reinterpret_cast<const S_ENTER_GAME*>(
               &_S_ENTER_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(S_ENTER_GAME& a, S_ENTER_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ENTER_GAME* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ENTER_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_ENTER_GAME* New() const final {
    return new S_ENTER_GAME();
  }

  S_ENTER_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_ENTER_GAME>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_ENTER_GAME& from);
  void MergeFrom(const S_ENTER_GAME& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ENTER_GAME* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ENTER_GAME";
  }
  protected:
  explicit S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ENTER_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CHAT) */ {
 public:
  inline C_CHAT() : C_CHAT(nullptr) {}
  ~C_CHAT() override;
  explicit constexpr C_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHAT(const C_CHAT& from);
  C_CHAT(C_CHAT&& from) noexcept
    : C_CHAT() {
    *this = ::std::move(from);
  }

  inline C_CHAT& operator=(const C_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHAT& operator=(C_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHAT* internal_default_instance() {
    return reinterpret_cast<const C_CHAT*>(
               &_C_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(C_CHAT& a, C_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHAT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_CHAT* New() const final {
    return new C_CHAT();
  }

  C_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_CHAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_CHAT& from);
  void MergeFrom(const C_CHAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHAT";
  }
  protected:
  explicit C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHAT) */ {
 public:
  inline S_CHAT() : S_CHAT(nullptr) {}
  ~S_CHAT() override;
  explicit constexpr S_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHAT(const S_CHAT& from);
  S_CHAT(S_CHAT&& from) noexcept
    : S_CHAT() {
    *this = ::std::move(from);
  }

  inline S_CHAT& operator=(const S_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHAT& operator=(S_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHAT* internal_default_instance() {
    return reinterpret_cast<const S_CHAT*>(
               &_S_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(S_CHAT& a, S_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHAT* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_CHAT* New() const final {
    return new S_CHAT();
  }

  S_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_CHAT>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_CHAT& from);
  void MergeFrom(const S_CHAT& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHAT* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHAT";
  }
  protected:
  explicit S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // uint64 playerId = 1;
  void clear_playerid();
  ::PROTOBUF_NAMESPACE_ID::uint64 playerid() const;
  void set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_playerid() const;
  void _internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 playerid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_CREATE_ACCOUNT

// string playerId = 1;
inline void C_CREATE_ACCOUNT::clear_playerid() {
  playerid_.ClearToEmpty();
}
inline const std::string& C_CREATE_ACCOUNT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE_ACCOUNT.playerId)
  return _internal_playerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CREATE_ACCOUNT::set_playerid(ArgT0&& arg0, ArgT... args) {
 
 playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE_ACCOUNT.playerId)
}
inline std::string* C_CREATE_ACCOUNT::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_CREATE_ACCOUNT.playerId)
  return _internal_mutable_playerid();
}
inline const std::string& C_CREATE_ACCOUNT::_internal_playerid() const {
  return playerid_.Get();
}
inline void C_CREATE_ACCOUNT::_internal_set_playerid(const std::string& value) {
  
  playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_CREATE_ACCOUNT::_internal_mutable_playerid() {
  
  return playerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_CREATE_ACCOUNT::release_playerid() {
  // @@protoc_insertion_point(field_release:Protocol.C_CREATE_ACCOUNT.playerId)
  return playerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_CREATE_ACCOUNT::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    
  } else {
    
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CREATE_ACCOUNT.playerId)
}

// string password = 2;
inline void C_CREATE_ACCOUNT::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& C_CREATE_ACCOUNT::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE_ACCOUNT.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CREATE_ACCOUNT::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE_ACCOUNT.password)
}
inline std::string* C_CREATE_ACCOUNT::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_CREATE_ACCOUNT.password)
  return _internal_mutable_password();
}
inline const std::string& C_CREATE_ACCOUNT::_internal_password() const {
  return password_.Get();
}
inline void C_CREATE_ACCOUNT::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_CREATE_ACCOUNT::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_CREATE_ACCOUNT::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C_CREATE_ACCOUNT.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_CREATE_ACCOUNT::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CREATE_ACCOUNT.password)
}

// string nickname = 3;
inline void C_CREATE_ACCOUNT::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& C_CREATE_ACCOUNT::nickname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE_ACCOUNT.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CREATE_ACCOUNT::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE_ACCOUNT.nickname)
}
inline std::string* C_CREATE_ACCOUNT::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_CREATE_ACCOUNT.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& C_CREATE_ACCOUNT::_internal_nickname() const {
  return nickname_.Get();
}
inline void C_CREATE_ACCOUNT::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_CREATE_ACCOUNT::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_CREATE_ACCOUNT::release_nickname() {
  // @@protoc_insertion_point(field_release:Protocol.C_CREATE_ACCOUNT.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_CREATE_ACCOUNT::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CREATE_ACCOUNT.nickname)
}

// -------------------------------------------------------------------

// S_CREATE_ACCOUNT

// bool success = 1;
inline void S_CREATE_ACCOUNT::clear_success() {
  success_ = false;
}
inline bool S_CREATE_ACCOUNT::_internal_success() const {
  return success_;
}
inline bool S_CREATE_ACCOUNT::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_ACCOUNT.success)
  return _internal_success();
}
inline void S_CREATE_ACCOUNT::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_CREATE_ACCOUNT::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_ACCOUNT.success)
}

// -------------------------------------------------------------------

// C_CHECK_DUPLICATE_ID

// string playerId = 1;
inline void C_CHECK_DUPLICATE_ID::clear_playerid() {
  playerid_.ClearToEmpty();
}
inline const std::string& C_CHECK_DUPLICATE_ID::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHECK_DUPLICATE_ID.playerId)
  return _internal_playerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CHECK_DUPLICATE_ID::set_playerid(ArgT0&& arg0, ArgT... args) {
 
 playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CHECK_DUPLICATE_ID.playerId)
}
inline std::string* C_CHECK_DUPLICATE_ID::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_CHECK_DUPLICATE_ID.playerId)
  return _internal_mutable_playerid();
}
inline const std::string& C_CHECK_DUPLICATE_ID::_internal_playerid() const {
  return playerid_.Get();
}
inline void C_CHECK_DUPLICATE_ID::_internal_set_playerid(const std::string& value) {
  
  playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_CHECK_DUPLICATE_ID::_internal_mutable_playerid() {
  
  return playerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_CHECK_DUPLICATE_ID::release_playerid() {
  // @@protoc_insertion_point(field_release:Protocol.C_CHECK_DUPLICATE_ID.playerId)
  return playerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_CHECK_DUPLICATE_ID::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    
  } else {
    
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CHECK_DUPLICATE_ID.playerId)
}

// -------------------------------------------------------------------

// S_CHECK_DUPLICATE_ID

// bool duplicated = 1;
inline void S_CHECK_DUPLICATE_ID::clear_duplicated() {
  duplicated_ = false;
}
inline bool S_CHECK_DUPLICATE_ID::_internal_duplicated() const {
  return duplicated_;
}
inline bool S_CHECK_DUPLICATE_ID::duplicated() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHECK_DUPLICATE_ID.duplicated)
  return _internal_duplicated();
}
inline void S_CHECK_DUPLICATE_ID::_internal_set_duplicated(bool value) {
  
  duplicated_ = value;
}
inline void S_CHECK_DUPLICATE_ID::set_duplicated(bool value) {
  _internal_set_duplicated(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHECK_DUPLICATE_ID.duplicated)
}

// -------------------------------------------------------------------

// C_LOGIN

// string playerId = 1;
inline void C_LOGIN::clear_playerid() {
  playerid_.ClearToEmpty();
}
inline const std::string& C_LOGIN::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LOGIN.playerId)
  return _internal_playerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOGIN::set_playerid(ArgT0&& arg0, ArgT... args) {
 
 playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_LOGIN.playerId)
}
inline std::string* C_LOGIN::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_LOGIN.playerId)
  return _internal_mutable_playerid();
}
inline const std::string& C_LOGIN::_internal_playerid() const {
  return playerid_.Get();
}
inline void C_LOGIN::_internal_set_playerid(const std::string& value) {
  
  playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_LOGIN::_internal_mutable_playerid() {
  
  return playerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_LOGIN::release_playerid() {
  // @@protoc_insertion_point(field_release:Protocol.C_LOGIN.playerId)
  return playerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_LOGIN::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    
  } else {
    
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_LOGIN.playerId)
}

// string password = 2;
inline void C_LOGIN::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& C_LOGIN::password() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LOGIN.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOGIN::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_LOGIN.password)
}
inline std::string* C_LOGIN::mutable_password() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_LOGIN.password)
  return _internal_mutable_password();
}
inline const std::string& C_LOGIN::_internal_password() const {
  return password_.Get();
}
inline void C_LOGIN::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_LOGIN::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_LOGIN::release_password() {
  // @@protoc_insertion_point(field_release:Protocol.C_LOGIN.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_LOGIN::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_LOGIN.password)
}

// -------------------------------------------------------------------

// S_LOGIN

// bool success = 1;
inline void S_LOGIN::clear_success() {
  success_ = false;
}
inline bool S_LOGIN::_internal_success() const {
  return success_;
}
inline bool S_LOGIN::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.success)
  return _internal_success();
}
inline void S_LOGIN::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_LOGIN::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.success)
}

// optional .Protocol.UserInfo user = 2;
inline bool S_LOGIN::_internal_has_user() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || user_ != nullptr);
  return value;
}
inline bool S_LOGIN::has_user() const {
  return _internal_has_user();
}
inline const ::Protocol::UserInfo& S_LOGIN::_internal_user() const {
  const ::Protocol::UserInfo* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::UserInfo&>(
      ::Protocol::_UserInfo_default_instance_);
}
inline const ::Protocol::UserInfo& S_LOGIN::user() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.user)
  return _internal_user();
}
inline void S_LOGIN::unsafe_arena_set_allocated_user(
    ::Protocol::UserInfo* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_LOGIN.user)
}
inline ::Protocol::UserInfo* S_LOGIN::release_user() {
  _has_bits_[0] &= ~0x00000001u;
  ::Protocol::UserInfo* temp = user_;
  user_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::UserInfo* S_LOGIN::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:Protocol.S_LOGIN.user)
  _has_bits_[0] &= ~0x00000001u;
  ::Protocol::UserInfo* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::Protocol::UserInfo* S_LOGIN::_internal_mutable_user() {
  _has_bits_[0] |= 0x00000001u;
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::UserInfo>(GetArenaForAllocation());
    user_ = p;
  }
  return user_;
}
inline ::Protocol::UserInfo* S_LOGIN::mutable_user() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGIN.user)
  return _internal_mutable_user();
}
inline void S_LOGIN::set_allocated_user(::Protocol::UserInfo* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user));
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_LOGIN.user)
}

// repeated .Protocol.UserInfo friends = 3;
inline int S_LOGIN::_internal_friends_size() const {
  return friends_.size();
}
inline int S_LOGIN::friends_size() const {
  return _internal_friends_size();
}
inline ::Protocol::UserInfo* S_LOGIN::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGIN.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >*
S_LOGIN::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_LOGIN.friends)
  return &friends_;
}
inline const ::Protocol::UserInfo& S_LOGIN::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::Protocol::UserInfo& S_LOGIN::friends(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.friends)
  return _internal_friends(index);
}
inline ::Protocol::UserInfo* S_LOGIN::_internal_add_friends() {
  return friends_.Add();
}
inline ::Protocol::UserInfo* S_LOGIN::add_friends() {
  // @@protoc_insertion_point(field_add:Protocol.S_LOGIN.friends)
  return _internal_add_friends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >&
S_LOGIN::friends() const {
  // @@protoc_insertion_point(field_list:Protocol.S_LOGIN.friends)
  return friends_;
}

// repeated .Protocol.UserInfo requests = 4;
inline int S_LOGIN::_internal_requests_size() const {
  return requests_.size();
}
inline int S_LOGIN::requests_size() const {
  return _internal_requests_size();
}
inline ::Protocol::UserInfo* S_LOGIN::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGIN.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >*
S_LOGIN::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_LOGIN.requests)
  return &requests_;
}
inline const ::Protocol::UserInfo& S_LOGIN::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::Protocol::UserInfo& S_LOGIN::requests(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.requests)
  return _internal_requests(index);
}
inline ::Protocol::UserInfo* S_LOGIN::_internal_add_requests() {
  return requests_.Add();
}
inline ::Protocol::UserInfo* S_LOGIN::add_requests() {
  // @@protoc_insertion_point(field_add:Protocol.S_LOGIN.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >&
S_LOGIN::requests() const {
  // @@protoc_insertion_point(field_list:Protocol.S_LOGIN.requests)
  return requests_;
}

// -------------------------------------------------------------------

// C_LOGOUT

// string playerId = 1;
inline void C_LOGOUT::clear_playerid() {
  playerid_.ClearToEmpty();
}
inline const std::string& C_LOGOUT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LOGOUT.playerId)
  return _internal_playerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOGOUT::set_playerid(ArgT0&& arg0, ArgT... args) {
 
 playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_LOGOUT.playerId)
}
inline std::string* C_LOGOUT::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_LOGOUT.playerId)
  return _internal_mutable_playerid();
}
inline const std::string& C_LOGOUT::_internal_playerid() const {
  return playerid_.Get();
}
inline void C_LOGOUT::_internal_set_playerid(const std::string& value) {
  
  playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_LOGOUT::_internal_mutable_playerid() {
  
  return playerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_LOGOUT::release_playerid() {
  // @@protoc_insertion_point(field_release:Protocol.C_LOGOUT.playerId)
  return playerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_LOGOUT::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    
  } else {
    
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_LOGOUT.playerId)
}

// -------------------------------------------------------------------

// S_LOGOUT

// bool success = 1;
inline void S_LOGOUT::clear_success() {
  success_ = false;
}
inline bool S_LOGOUT::_internal_success() const {
  return success_;
}
inline bool S_LOGOUT::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGOUT.success)
  return _internal_success();
}
inline void S_LOGOUT::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_LOGOUT::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGOUT.success)
}

// optional .Protocol.UserInfo user = 2;
inline bool S_LOGOUT::_internal_has_user() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || user_ != nullptr);
  return value;
}
inline bool S_LOGOUT::has_user() const {
  return _internal_has_user();
}
inline const ::Protocol::UserInfo& S_LOGOUT::_internal_user() const {
  const ::Protocol::UserInfo* p = user_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::UserInfo&>(
      ::Protocol::_UserInfo_default_instance_);
}
inline const ::Protocol::UserInfo& S_LOGOUT::user() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGOUT.user)
  return _internal_user();
}
inline void S_LOGOUT::unsafe_arena_set_allocated_user(
    ::Protocol::UserInfo* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  user_ = user;
  if (user) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_LOGOUT.user)
}
inline ::Protocol::UserInfo* S_LOGOUT::release_user() {
  _has_bits_[0] &= ~0x00000001u;
  ::Protocol::UserInfo* temp = user_;
  user_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::UserInfo* S_LOGOUT::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:Protocol.S_LOGOUT.user)
  _has_bits_[0] &= ~0x00000001u;
  ::Protocol::UserInfo* temp = user_;
  user_ = nullptr;
  return temp;
}
inline ::Protocol::UserInfo* S_LOGOUT::_internal_mutable_user() {
  _has_bits_[0] |= 0x00000001u;
  if (user_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::UserInfo>(GetArenaForAllocation());
    user_ = p;
  }
  return user_;
}
inline ::Protocol::UserInfo* S_LOGOUT::mutable_user() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGOUT.user)
  return _internal_mutable_user();
}
inline void S_LOGOUT::set_allocated_user(::Protocol::UserInfo* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_);
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user));
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_ = user;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_LOGOUT.user)
}

// -------------------------------------------------------------------

// C_AUTO_LOGIN

// -------------------------------------------------------------------

// S_ACTIVE_FRIEND

// string nickname = 1;
inline void S_ACTIVE_FRIEND::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& S_ACTIVE_FRIEND::nickname() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ACTIVE_FRIEND.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_ACTIVE_FRIEND::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_ACTIVE_FRIEND.nickname)
}
inline std::string* S_ACTIVE_FRIEND::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ACTIVE_FRIEND.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& S_ACTIVE_FRIEND::_internal_nickname() const {
  return nickname_.Get();
}
inline void S_ACTIVE_FRIEND::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_ACTIVE_FRIEND::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_ACTIVE_FRIEND::release_nickname() {
  // @@protoc_insertion_point(field_release:Protocol.S_ACTIVE_FRIEND.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_ACTIVE_FRIEND::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ACTIVE_FRIEND.nickname)
}

// bool isActive = 2;
inline void S_ACTIVE_FRIEND::clear_isactive() {
  isactive_ = false;
}
inline bool S_ACTIVE_FRIEND::_internal_isactive() const {
  return isactive_;
}
inline bool S_ACTIVE_FRIEND::isactive() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ACTIVE_FRIEND.isActive)
  return _internal_isactive();
}
inline void S_ACTIVE_FRIEND::_internal_set_isactive(bool value) {
  
  isactive_ = value;
}
inline void S_ACTIVE_FRIEND::set_isactive(bool value) {
  _internal_set_isactive(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ACTIVE_FRIEND.isActive)
}

// -------------------------------------------------------------------

// C_SEND_REQUEST

// string playerid = 1;
inline void C_SEND_REQUEST::clear_playerid() {
  playerid_.ClearToEmpty();
}
inline const std::string& C_SEND_REQUEST::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SEND_REQUEST.playerid)
  return _internal_playerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_SEND_REQUEST::set_playerid(ArgT0&& arg0, ArgT... args) {
 
 playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_SEND_REQUEST.playerid)
}
inline std::string* C_SEND_REQUEST::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_SEND_REQUEST.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& C_SEND_REQUEST::_internal_playerid() const {
  return playerid_.Get();
}
inline void C_SEND_REQUEST::_internal_set_playerid(const std::string& value) {
  
  playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_SEND_REQUEST::_internal_mutable_playerid() {
  
  return playerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_SEND_REQUEST::release_playerid() {
  // @@protoc_insertion_point(field_release:Protocol.C_SEND_REQUEST.playerid)
  return playerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_SEND_REQUEST::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    
  } else {
    
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SEND_REQUEST.playerid)
}

// string friendNickname = 2;
inline void C_SEND_REQUEST::clear_friendnickname() {
  friendnickname_.ClearToEmpty();
}
inline const std::string& C_SEND_REQUEST::friendnickname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SEND_REQUEST.friendNickname)
  return _internal_friendnickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_SEND_REQUEST::set_friendnickname(ArgT0&& arg0, ArgT... args) {
 
 friendnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_SEND_REQUEST.friendNickname)
}
inline std::string* C_SEND_REQUEST::mutable_friendnickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_SEND_REQUEST.friendNickname)
  return _internal_mutable_friendnickname();
}
inline const std::string& C_SEND_REQUEST::_internal_friendnickname() const {
  return friendnickname_.Get();
}
inline void C_SEND_REQUEST::_internal_set_friendnickname(const std::string& value) {
  
  friendnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_SEND_REQUEST::_internal_mutable_friendnickname() {
  
  return friendnickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_SEND_REQUEST::release_friendnickname() {
  // @@protoc_insertion_point(field_release:Protocol.C_SEND_REQUEST.friendNickname)
  return friendnickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_SEND_REQUEST::set_allocated_friendnickname(std::string* friendnickname) {
  if (friendnickname != nullptr) {
    
  } else {
    
  }
  friendnickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friendnickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SEND_REQUEST.friendNickname)
}

// -------------------------------------------------------------------

// S_SEND_REQUEST

// string playerid = 1;
inline void S_SEND_REQUEST::clear_playerid() {
  playerid_.ClearToEmpty();
}
inline const std::string& S_SEND_REQUEST::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SEND_REQUEST.playerid)
  return _internal_playerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_SEND_REQUEST::set_playerid(ArgT0&& arg0, ArgT... args) {
 
 playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_SEND_REQUEST.playerid)
}
inline std::string* S_SEND_REQUEST::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SEND_REQUEST.playerid)
  return _internal_mutable_playerid();
}
inline const std::string& S_SEND_REQUEST::_internal_playerid() const {
  return playerid_.Get();
}
inline void S_SEND_REQUEST::_internal_set_playerid(const std::string& value) {
  
  playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_SEND_REQUEST::_internal_mutable_playerid() {
  
  return playerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_SEND_REQUEST::release_playerid() {
  // @@protoc_insertion_point(field_release:Protocol.S_SEND_REQUEST.playerid)
  return playerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_SEND_REQUEST::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    
  } else {
    
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SEND_REQUEST.playerid)
}

// string friendNickname = 2;
inline void S_SEND_REQUEST::clear_friendnickname() {
  friendnickname_.ClearToEmpty();
}
inline const std::string& S_SEND_REQUEST::friendnickname() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SEND_REQUEST.friendNickname)
  return _internal_friendnickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_SEND_REQUEST::set_friendnickname(ArgT0&& arg0, ArgT... args) {
 
 friendnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_SEND_REQUEST.friendNickname)
}
inline std::string* S_SEND_REQUEST::mutable_friendnickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SEND_REQUEST.friendNickname)
  return _internal_mutable_friendnickname();
}
inline const std::string& S_SEND_REQUEST::_internal_friendnickname() const {
  return friendnickname_.Get();
}
inline void S_SEND_REQUEST::_internal_set_friendnickname(const std::string& value) {
  
  friendnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_SEND_REQUEST::_internal_mutable_friendnickname() {
  
  return friendnickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_SEND_REQUEST::release_friendnickname() {
  // @@protoc_insertion_point(field_release:Protocol.S_SEND_REQUEST.friendNickname)
  return friendnickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_SEND_REQUEST::set_allocated_friendnickname(std::string* friendnickname) {
  if (friendnickname != nullptr) {
    
  } else {
    
  }
  friendnickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friendnickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SEND_REQUEST.friendNickname)
}

// -------------------------------------------------------------------

// C_ADD_FRIEND

// string myId = 1;
inline void C_ADD_FRIEND::clear_myid() {
  myid_.ClearToEmpty();
}
inline const std::string& C_ADD_FRIEND::myid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ADD_FRIEND.myId)
  return _internal_myid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_ADD_FRIEND::set_myid(ArgT0&& arg0, ArgT... args) {
 
 myid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_ADD_FRIEND.myId)
}
inline std::string* C_ADD_FRIEND::mutable_myid() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_ADD_FRIEND.myId)
  return _internal_mutable_myid();
}
inline const std::string& C_ADD_FRIEND::_internal_myid() const {
  return myid_.Get();
}
inline void C_ADD_FRIEND::_internal_set_myid(const std::string& value) {
  
  myid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_ADD_FRIEND::_internal_mutable_myid() {
  
  return myid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_ADD_FRIEND::release_myid() {
  // @@protoc_insertion_point(field_release:Protocol.C_ADD_FRIEND.myId)
  return myid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_ADD_FRIEND::set_allocated_myid(std::string* myid) {
  if (myid != nullptr) {
    
  } else {
    
  }
  myid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), myid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ADD_FRIEND.myId)
}

// string friendId = 2;
inline void C_ADD_FRIEND::clear_friendid() {
  friendid_.ClearToEmpty();
}
inline const std::string& C_ADD_FRIEND::friendid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ADD_FRIEND.friendId)
  return _internal_friendid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_ADD_FRIEND::set_friendid(ArgT0&& arg0, ArgT... args) {
 
 friendid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_ADD_FRIEND.friendId)
}
inline std::string* C_ADD_FRIEND::mutable_friendid() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_ADD_FRIEND.friendId)
  return _internal_mutable_friendid();
}
inline const std::string& C_ADD_FRIEND::_internal_friendid() const {
  return friendid_.Get();
}
inline void C_ADD_FRIEND::_internal_set_friendid(const std::string& value) {
  
  friendid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_ADD_FRIEND::_internal_mutable_friendid() {
  
  return friendid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_ADD_FRIEND::release_friendid() {
  // @@protoc_insertion_point(field_release:Protocol.C_ADD_FRIEND.friendId)
  return friendid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_ADD_FRIEND::set_allocated_friendid(std::string* friendid) {
  if (friendid != nullptr) {
    
  } else {
    
  }
  friendid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friendid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ADD_FRIEND.friendId)
}

// bool approve = 3;
inline void C_ADD_FRIEND::clear_approve() {
  approve_ = false;
}
inline bool C_ADD_FRIEND::_internal_approve() const {
  return approve_;
}
inline bool C_ADD_FRIEND::approve() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ADD_FRIEND.approve)
  return _internal_approve();
}
inline void C_ADD_FRIEND::_internal_set_approve(bool value) {
  
  approve_ = value;
}
inline void C_ADD_FRIEND::set_approve(bool value) {
  _internal_set_approve(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ADD_FRIEND.approve)
}

// -------------------------------------------------------------------

// S_ADD_FRIEND

// .Protocol.UserInfo friendInfo = 1;
inline bool S_ADD_FRIEND::_internal_has_friendinfo() const {
  return this != internal_default_instance() && friendinfo_ != nullptr;
}
inline bool S_ADD_FRIEND::has_friendinfo() const {
  return _internal_has_friendinfo();
}
inline const ::Protocol::UserInfo& S_ADD_FRIEND::_internal_friendinfo() const {
  const ::Protocol::UserInfo* p = friendinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::UserInfo&>(
      ::Protocol::_UserInfo_default_instance_);
}
inline const ::Protocol::UserInfo& S_ADD_FRIEND::friendinfo() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_FRIEND.friendInfo)
  return _internal_friendinfo();
}
inline void S_ADD_FRIEND::unsafe_arena_set_allocated_friendinfo(
    ::Protocol::UserInfo* friendinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friendinfo_);
  }
  friendinfo_ = friendinfo;
  if (friendinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ADD_FRIEND.friendInfo)
}
inline ::Protocol::UserInfo* S_ADD_FRIEND::release_friendinfo() {
  
  ::Protocol::UserInfo* temp = friendinfo_;
  friendinfo_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::UserInfo* S_ADD_FRIEND::unsafe_arena_release_friendinfo() {
  // @@protoc_insertion_point(field_release:Protocol.S_ADD_FRIEND.friendInfo)
  
  ::Protocol::UserInfo* temp = friendinfo_;
  friendinfo_ = nullptr;
  return temp;
}
inline ::Protocol::UserInfo* S_ADD_FRIEND::_internal_mutable_friendinfo() {
  
  if (friendinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::UserInfo>(GetArenaForAllocation());
    friendinfo_ = p;
  }
  return friendinfo_;
}
inline ::Protocol::UserInfo* S_ADD_FRIEND::mutable_friendinfo() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_ADD_FRIEND.friendInfo)
  return _internal_mutable_friendinfo();
}
inline void S_ADD_FRIEND::set_allocated_friendinfo(::Protocol::UserInfo* friendinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(friendinfo_);
  }
  if (friendinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(friendinfo));
    if (message_arena != submessage_arena) {
      friendinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, friendinfo, submessage_arena);
    }
    
  } else {
    
  }
  friendinfo_ = friendinfo;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ADD_FRIEND.friendInfo)
}

// bool approve = 2;
inline void S_ADD_FRIEND::clear_approve() {
  approve_ = false;
}
inline bool S_ADD_FRIEND::_internal_approve() const {
  return approve_;
}
inline bool S_ADD_FRIEND::approve() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADD_FRIEND.approve)
  return _internal_approve();
}
inline void S_ADD_FRIEND::_internal_set_approve(bool value) {
  
  approve_ = value;
}
inline void S_ADD_FRIEND::set_approve(bool value) {
  _internal_set_approve(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ADD_FRIEND.approve)
}

// -------------------------------------------------------------------

// C_CHECK_FRIEND

// string myNickname = 1;
inline void C_CHECK_FRIEND::clear_mynickname() {
  mynickname_.ClearToEmpty();
}
inline const std::string& C_CHECK_FRIEND::mynickname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHECK_FRIEND.myNickname)
  return _internal_mynickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CHECK_FRIEND::set_mynickname(ArgT0&& arg0, ArgT... args) {
 
 mynickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CHECK_FRIEND.myNickname)
}
inline std::string* C_CHECK_FRIEND::mutable_mynickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_CHECK_FRIEND.myNickname)
  return _internal_mutable_mynickname();
}
inline const std::string& C_CHECK_FRIEND::_internal_mynickname() const {
  return mynickname_.Get();
}
inline void C_CHECK_FRIEND::_internal_set_mynickname(const std::string& value) {
  
  mynickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_CHECK_FRIEND::_internal_mutable_mynickname() {
  
  return mynickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_CHECK_FRIEND::release_mynickname() {
  // @@protoc_insertion_point(field_release:Protocol.C_CHECK_FRIEND.myNickname)
  return mynickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_CHECK_FRIEND::set_allocated_mynickname(std::string* mynickname) {
  if (mynickname != nullptr) {
    
  } else {
    
  }
  mynickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mynickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CHECK_FRIEND.myNickname)
}

// string requestNickname = 2;
inline void C_CHECK_FRIEND::clear_requestnickname() {
  requestnickname_.ClearToEmpty();
}
inline const std::string& C_CHECK_FRIEND::requestnickname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHECK_FRIEND.requestNickname)
  return _internal_requestnickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CHECK_FRIEND::set_requestnickname(ArgT0&& arg0, ArgT... args) {
 
 requestnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CHECK_FRIEND.requestNickname)
}
inline std::string* C_CHECK_FRIEND::mutable_requestnickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_CHECK_FRIEND.requestNickname)
  return _internal_mutable_requestnickname();
}
inline const std::string& C_CHECK_FRIEND::_internal_requestnickname() const {
  return requestnickname_.Get();
}
inline void C_CHECK_FRIEND::_internal_set_requestnickname(const std::string& value) {
  
  requestnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_CHECK_FRIEND::_internal_mutable_requestnickname() {
  
  return requestnickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_CHECK_FRIEND::release_requestnickname() {
  // @@protoc_insertion_point(field_release:Protocol.C_CHECK_FRIEND.requestNickname)
  return requestnickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_CHECK_FRIEND::set_allocated_requestnickname(std::string* requestnickname) {
  if (requestnickname != nullptr) {
    
  } else {
    
  }
  requestnickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), requestnickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CHECK_FRIEND.requestNickname)
}

// -------------------------------------------------------------------

// S_CHECK_FRIEND

// repeated int32 success = 1;
inline int S_CHECK_FRIEND::_internal_success_size() const {
  return success_.size();
}
inline int S_CHECK_FRIEND::success_size() const {
  return _internal_success_size();
}
inline void S_CHECK_FRIEND::clear_success() {
  success_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CHECK_FRIEND::_internal_success(int index) const {
  return success_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_CHECK_FRIEND::success(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHECK_FRIEND.success)
  return _internal_success(index);
}
inline void S_CHECK_FRIEND::set_success(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  success_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHECK_FRIEND.success)
}
inline void S_CHECK_FRIEND::_internal_add_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  success_.Add(value);
}
inline void S_CHECK_FRIEND::add_success(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_success(value);
  // @@protoc_insertion_point(field_add:Protocol.S_CHECK_FRIEND.success)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
S_CHECK_FRIEND::_internal_success() const {
  return success_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
S_CHECK_FRIEND::success() const {
  // @@protoc_insertion_point(field_list:Protocol.S_CHECK_FRIEND.success)
  return _internal_success();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
S_CHECK_FRIEND::_internal_mutable_success() {
  return &success_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
S_CHECK_FRIEND::mutable_success() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_CHECK_FRIEND.success)
  return _internal_mutable_success();
}

// repeated string playerNickname = 2;
inline int S_CHECK_FRIEND::_internal_playernickname_size() const {
  return playernickname_.size();
}
inline int S_CHECK_FRIEND::playernickname_size() const {
  return _internal_playernickname_size();
}
inline void S_CHECK_FRIEND::clear_playernickname() {
  playernickname_.Clear();
}
inline std::string* S_CHECK_FRIEND::add_playernickname() {
  // @@protoc_insertion_point(field_add_mutable:Protocol.S_CHECK_FRIEND.playerNickname)
  return _internal_add_playernickname();
}
inline const std::string& S_CHECK_FRIEND::_internal_playernickname(int index) const {
  return playernickname_.Get(index);
}
inline const std::string& S_CHECK_FRIEND::playernickname(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHECK_FRIEND.playerNickname)
  return _internal_playernickname(index);
}
inline std::string* S_CHECK_FRIEND::mutable_playernickname(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHECK_FRIEND.playerNickname)
  return playernickname_.Mutable(index);
}
inline void S_CHECK_FRIEND::set_playernickname(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Protocol.S_CHECK_FRIEND.playerNickname)
  playernickname_.Mutable(index)->assign(value);
}
inline void S_CHECK_FRIEND::set_playernickname(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Protocol.S_CHECK_FRIEND.playerNickname)
  playernickname_.Mutable(index)->assign(std::move(value));
}
inline void S_CHECK_FRIEND::set_playernickname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  playernickname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.S_CHECK_FRIEND.playerNickname)
}
inline void S_CHECK_FRIEND::set_playernickname(int index, const char* value, size_t size) {
  playernickname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.S_CHECK_FRIEND.playerNickname)
}
inline std::string* S_CHECK_FRIEND::_internal_add_playernickname() {
  return playernickname_.Add();
}
inline void S_CHECK_FRIEND::add_playernickname(const std::string& value) {
  playernickname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.S_CHECK_FRIEND.playerNickname)
}
inline void S_CHECK_FRIEND::add_playernickname(std::string&& value) {
  playernickname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.S_CHECK_FRIEND.playerNickname)
}
inline void S_CHECK_FRIEND::add_playernickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  playernickname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.S_CHECK_FRIEND.playerNickname)
}
inline void S_CHECK_FRIEND::add_playernickname(const char* value, size_t size) {
  playernickname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.S_CHECK_FRIEND.playerNickname)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
S_CHECK_FRIEND::playernickname() const {
  // @@protoc_insertion_point(field_list:Protocol.S_CHECK_FRIEND.playerNickname)
  return playernickname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
S_CHECK_FRIEND::mutable_playernickname() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_CHECK_FRIEND.playerNickname)
  return &playernickname_;
}

// -------------------------------------------------------------------

// C_GET_FRIEND

// string playerId = 1;
inline void C_GET_FRIEND::clear_playerid() {
  playerid_.ClearToEmpty();
}
inline const std::string& C_GET_FRIEND::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_GET_FRIEND.playerId)
  return _internal_playerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_GET_FRIEND::set_playerid(ArgT0&& arg0, ArgT... args) {
 
 playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_GET_FRIEND.playerId)
}
inline std::string* C_GET_FRIEND::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_GET_FRIEND.playerId)
  return _internal_mutable_playerid();
}
inline const std::string& C_GET_FRIEND::_internal_playerid() const {
  return playerid_.Get();
}
inline void C_GET_FRIEND::_internal_set_playerid(const std::string& value) {
  
  playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_GET_FRIEND::_internal_mutable_playerid() {
  
  return playerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_GET_FRIEND::release_playerid() {
  // @@protoc_insertion_point(field_release:Protocol.C_GET_FRIEND.playerId)
  return playerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_GET_FRIEND::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    
  } else {
    
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_GET_FRIEND.playerId)
}

// -------------------------------------------------------------------

// S_GET_FRIEND

// repeated .Protocol.UserInfo friends = 1;
inline int S_GET_FRIEND::_internal_friends_size() const {
  return friends_.size();
}
inline int S_GET_FRIEND::friends_size() const {
  return _internal_friends_size();
}
inline ::Protocol::UserInfo* S_GET_FRIEND::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_GET_FRIEND.friends)
  return friends_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >*
S_GET_FRIEND::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_GET_FRIEND.friends)
  return &friends_;
}
inline const ::Protocol::UserInfo& S_GET_FRIEND::_internal_friends(int index) const {
  return friends_.Get(index);
}
inline const ::Protocol::UserInfo& S_GET_FRIEND::friends(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_GET_FRIEND.friends)
  return _internal_friends(index);
}
inline ::Protocol::UserInfo* S_GET_FRIEND::_internal_add_friends() {
  return friends_.Add();
}
inline ::Protocol::UserInfo* S_GET_FRIEND::add_friends() {
  // @@protoc_insertion_point(field_add:Protocol.S_GET_FRIEND.friends)
  return _internal_add_friends();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >&
S_GET_FRIEND::friends() const {
  // @@protoc_insertion_point(field_list:Protocol.S_GET_FRIEND.friends)
  return friends_;
}

// -------------------------------------------------------------------

// C_GET_REQUESTS

// string playerId = 1;
inline void C_GET_REQUESTS::clear_playerid() {
  playerid_.ClearToEmpty();
}
inline const std::string& C_GET_REQUESTS::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_GET_REQUESTS.playerId)
  return _internal_playerid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_GET_REQUESTS::set_playerid(ArgT0&& arg0, ArgT... args) {
 
 playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_GET_REQUESTS.playerId)
}
inline std::string* C_GET_REQUESTS::mutable_playerid() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_GET_REQUESTS.playerId)
  return _internal_mutable_playerid();
}
inline const std::string& C_GET_REQUESTS::_internal_playerid() const {
  return playerid_.Get();
}
inline void C_GET_REQUESTS::_internal_set_playerid(const std::string& value) {
  
  playerid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_GET_REQUESTS::_internal_mutable_playerid() {
  
  return playerid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_GET_REQUESTS::release_playerid() {
  // @@protoc_insertion_point(field_release:Protocol.C_GET_REQUESTS.playerId)
  return playerid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_GET_REQUESTS::set_allocated_playerid(std::string* playerid) {
  if (playerid != nullptr) {
    
  } else {
    
  }
  playerid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), playerid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_GET_REQUESTS.playerId)
}

// -------------------------------------------------------------------

// S_GET_REQUESTS

// repeated .Protocol.UserInfo requests = 1;
inline int S_GET_REQUESTS::_internal_requests_size() const {
  return requests_.size();
}
inline int S_GET_REQUESTS::requests_size() const {
  return _internal_requests_size();
}
inline ::Protocol::UserInfo* S_GET_REQUESTS::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_GET_REQUESTS.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >*
S_GET_REQUESTS::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_GET_REQUESTS.requests)
  return &requests_;
}
inline const ::Protocol::UserInfo& S_GET_REQUESTS::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::Protocol::UserInfo& S_GET_REQUESTS::requests(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_GET_REQUESTS.requests)
  return _internal_requests(index);
}
inline ::Protocol::UserInfo* S_GET_REQUESTS::_internal_add_requests() {
  return requests_.Add();
}
inline ::Protocol::UserInfo* S_GET_REQUESTS::add_requests() {
  // @@protoc_insertion_point(field_add:Protocol.S_GET_REQUESTS.requests)
  return _internal_add_requests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::UserInfo >&
S_GET_REQUESTS::requests() const {
  // @@protoc_insertion_point(field_list:Protocol.S_GET_REQUESTS.requests)
  return requests_;
}

// -------------------------------------------------------------------

// C_CREATE_ROOM

// string ip = 1;
inline void C_CREATE_ROOM::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& C_CREATE_ROOM::ip() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE_ROOM.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CREATE_ROOM::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE_ROOM.ip)
}
inline std::string* C_CREATE_ROOM::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_CREATE_ROOM.ip)
  return _internal_mutable_ip();
}
inline const std::string& C_CREATE_ROOM::_internal_ip() const {
  return ip_.Get();
}
inline void C_CREATE_ROOM::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_CREATE_ROOM::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_CREATE_ROOM::release_ip() {
  // @@protoc_insertion_point(field_release:Protocol.C_CREATE_ROOM.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_CREATE_ROOM::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CREATE_ROOM.ip)
}

// -------------------------------------------------------------------

// S_CREATE_ROOM

// bool success = 1;
inline void S_CREATE_ROOM::clear_success() {
  success_ = false;
}
inline bool S_CREATE_ROOM::_internal_success() const {
  return success_;
}
inline bool S_CREATE_ROOM::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_ROOM.success)
  return _internal_success();
}
inline void S_CREATE_ROOM::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_CREATE_ROOM::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_ROOM.success)
}

// uint64 roomNum = 2;
inline void S_CREATE_ROOM::clear_roomnum() {
  roomnum_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_CREATE_ROOM::_internal_roomnum() const {
  return roomnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_CREATE_ROOM::roomnum() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_ROOM.roomNum)
  return _internal_roomnum();
}
inline void S_CREATE_ROOM::_internal_set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomnum_ = value;
}
inline void S_CREATE_ROOM::set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomnum(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_ROOM.roomNum)
}

// -------------------------------------------------------------------

// C_SHOW_ROOM

// uint64 roomNum = 1;
inline void C_SHOW_ROOM::clear_roomnum() {
  roomnum_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_SHOW_ROOM::_internal_roomnum() const {
  return roomnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_SHOW_ROOM::roomnum() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SHOW_ROOM.roomNum)
  return _internal_roomnum();
}
inline void C_SHOW_ROOM::_internal_set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomnum_ = value;
}
inline void C_SHOW_ROOM::set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomnum(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SHOW_ROOM.roomNum)
}

// -------------------------------------------------------------------

// S_SHOW_ROOM

// repeated uint64 roomNums = 1;
inline int S_SHOW_ROOM::_internal_roomnums_size() const {
  return roomnums_.size();
}
inline int S_SHOW_ROOM::roomnums_size() const {
  return _internal_roomnums_size();
}
inline void S_SHOW_ROOM::clear_roomnums() {
  roomnums_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_SHOW_ROOM::_internal_roomnums(int index) const {
  return roomnums_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_SHOW_ROOM::roomnums(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_SHOW_ROOM.roomNums)
  return _internal_roomnums(index);
}
inline void S_SHOW_ROOM::set_roomnums(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  roomnums_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_SHOW_ROOM.roomNums)
}
inline void S_SHOW_ROOM::_internal_add_roomnums(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  roomnums_.Add(value);
}
inline void S_SHOW_ROOM::add_roomnums(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_roomnums(value);
  // @@protoc_insertion_point(field_add:Protocol.S_SHOW_ROOM.roomNums)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
S_SHOW_ROOM::_internal_roomnums() const {
  return roomnums_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
S_SHOW_ROOM::roomnums() const {
  // @@protoc_insertion_point(field_list:Protocol.S_SHOW_ROOM.roomNums)
  return _internal_roomnums();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
S_SHOW_ROOM::_internal_mutable_roomnums() {
  return &roomnums_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
S_SHOW_ROOM::mutable_roomnums() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_SHOW_ROOM.roomNums)
  return _internal_mutable_roomnums();
}

// repeated string hostNickname = 2;
inline int S_SHOW_ROOM::_internal_hostnickname_size() const {
  return hostnickname_.size();
}
inline int S_SHOW_ROOM::hostnickname_size() const {
  return _internal_hostnickname_size();
}
inline void S_SHOW_ROOM::clear_hostnickname() {
  hostnickname_.Clear();
}
inline std::string* S_SHOW_ROOM::add_hostnickname() {
  // @@protoc_insertion_point(field_add_mutable:Protocol.S_SHOW_ROOM.hostNickname)
  return _internal_add_hostnickname();
}
inline const std::string& S_SHOW_ROOM::_internal_hostnickname(int index) const {
  return hostnickname_.Get(index);
}
inline const std::string& S_SHOW_ROOM::hostnickname(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_SHOW_ROOM.hostNickname)
  return _internal_hostnickname(index);
}
inline std::string* S_SHOW_ROOM::mutable_hostnickname(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SHOW_ROOM.hostNickname)
  return hostnickname_.Mutable(index);
}
inline void S_SHOW_ROOM::set_hostnickname(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Protocol.S_SHOW_ROOM.hostNickname)
  hostnickname_.Mutable(index)->assign(value);
}
inline void S_SHOW_ROOM::set_hostnickname(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Protocol.S_SHOW_ROOM.hostNickname)
  hostnickname_.Mutable(index)->assign(std::move(value));
}
inline void S_SHOW_ROOM::set_hostnickname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hostnickname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Protocol.S_SHOW_ROOM.hostNickname)
}
inline void S_SHOW_ROOM::set_hostnickname(int index, const char* value, size_t size) {
  hostnickname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Protocol.S_SHOW_ROOM.hostNickname)
}
inline std::string* S_SHOW_ROOM::_internal_add_hostnickname() {
  return hostnickname_.Add();
}
inline void S_SHOW_ROOM::add_hostnickname(const std::string& value) {
  hostnickname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Protocol.S_SHOW_ROOM.hostNickname)
}
inline void S_SHOW_ROOM::add_hostnickname(std::string&& value) {
  hostnickname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Protocol.S_SHOW_ROOM.hostNickname)
}
inline void S_SHOW_ROOM::add_hostnickname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hostnickname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Protocol.S_SHOW_ROOM.hostNickname)
}
inline void S_SHOW_ROOM::add_hostnickname(const char* value, size_t size) {
  hostnickname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Protocol.S_SHOW_ROOM.hostNickname)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
S_SHOW_ROOM::hostnickname() const {
  // @@protoc_insertion_point(field_list:Protocol.S_SHOW_ROOM.hostNickname)
  return hostnickname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
S_SHOW_ROOM::mutable_hostnickname() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_SHOW_ROOM.hostNickname)
  return &hostnickname_;
}

// -------------------------------------------------------------------

// C_JOIN_ROOM

// uint64 roomNum = 1;
inline void C_JOIN_ROOM::clear_roomnum() {
  roomnum_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_JOIN_ROOM::_internal_roomnum() const {
  return roomnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_JOIN_ROOM::roomnum() const {
  // @@protoc_insertion_point(field_get:Protocol.C_JOIN_ROOM.roomNum)
  return _internal_roomnum();
}
inline void C_JOIN_ROOM::_internal_set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomnum_ = value;
}
inline void C_JOIN_ROOM::set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomnum(value);
  // @@protoc_insertion_point(field_set:Protocol.C_JOIN_ROOM.roomNum)
}

// -------------------------------------------------------------------

// S_JOIN_ROOM

// string ip = 1;
inline void S_JOIN_ROOM::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& S_JOIN_ROOM::ip() const {
  // @@protoc_insertion_point(field_get:Protocol.S_JOIN_ROOM.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_JOIN_ROOM::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_JOIN_ROOM.ip)
}
inline std::string* S_JOIN_ROOM::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_JOIN_ROOM.ip)
  return _internal_mutable_ip();
}
inline const std::string& S_JOIN_ROOM::_internal_ip() const {
  return ip_.Get();
}
inline void S_JOIN_ROOM::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_JOIN_ROOM::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_JOIN_ROOM::release_ip() {
  // @@protoc_insertion_point(field_release:Protocol.S_JOIN_ROOM.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_JOIN_ROOM::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_JOIN_ROOM.ip)
}

// uint64 roomNum = 2;
inline void S_JOIN_ROOM::clear_roomnum() {
  roomnum_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_JOIN_ROOM::_internal_roomnum() const {
  return roomnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_JOIN_ROOM::roomnum() const {
  // @@protoc_insertion_point(field_get:Protocol.S_JOIN_ROOM.roomNum)
  return _internal_roomnum();
}
inline void S_JOIN_ROOM::_internal_set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomnum_ = value;
}
inline void S_JOIN_ROOM::set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomnum(value);
  // @@protoc_insertion_point(field_set:Protocol.S_JOIN_ROOM.roomNum)
}

// bool success = 3;
inline void S_JOIN_ROOM::clear_success() {
  success_ = false;
}
inline bool S_JOIN_ROOM::_internal_success() const {
  return success_;
}
inline bool S_JOIN_ROOM::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_JOIN_ROOM.success)
  return _internal_success();
}
inline void S_JOIN_ROOM::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_JOIN_ROOM::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_JOIN_ROOM.success)
}

// -------------------------------------------------------------------

// C_LEAVE_ROOM

// uint64 roomNum = 1;
inline void C_LEAVE_ROOM::clear_roomnum() {
  roomnum_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_LEAVE_ROOM::_internal_roomnum() const {
  return roomnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_LEAVE_ROOM::roomnum() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LEAVE_ROOM.roomNum)
  return _internal_roomnum();
}
inline void C_LEAVE_ROOM::_internal_set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomnum_ = value;
}
inline void C_LEAVE_ROOM::set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomnum(value);
  // @@protoc_insertion_point(field_set:Protocol.C_LEAVE_ROOM.roomNum)
}

// -------------------------------------------------------------------

// S_LEAVE_ROOM

// -------------------------------------------------------------------

// C_DESTROY_ROOM

// uint64 roomNum = 1;
inline void C_DESTROY_ROOM::clear_roomnum() {
  roomnum_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_DESTROY_ROOM::_internal_roomnum() const {
  return roomnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_DESTROY_ROOM::roomnum() const {
  // @@protoc_insertion_point(field_get:Protocol.C_DESTROY_ROOM.roomNum)
  return _internal_roomnum();
}
inline void C_DESTROY_ROOM::_internal_set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomnum_ = value;
}
inline void C_DESTROY_ROOM::set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomnum(value);
  // @@protoc_insertion_point(field_set:Protocol.C_DESTROY_ROOM.roomNum)
}

// -------------------------------------------------------------------

// S_DESTROY_ROOM

// bool success = 1;
inline void S_DESTROY_ROOM::clear_success() {
  success_ = false;
}
inline bool S_DESTROY_ROOM::_internal_success() const {
  return success_;
}
inline bool S_DESTROY_ROOM::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_DESTROY_ROOM.success)
  return _internal_success();
}
inline void S_DESTROY_ROOM::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_DESTROY_ROOM::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_DESTROY_ROOM.success)
}

// -------------------------------------------------------------------

// C_SEND_INVITATION

// string friendNickname = 1;
inline void C_SEND_INVITATION::clear_friendnickname() {
  friendnickname_.ClearToEmpty();
}
inline const std::string& C_SEND_INVITATION::friendnickname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SEND_INVITATION.friendNickname)
  return _internal_friendnickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_SEND_INVITATION::set_friendnickname(ArgT0&& arg0, ArgT... args) {
 
 friendnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_SEND_INVITATION.friendNickname)
}
inline std::string* C_SEND_INVITATION::mutable_friendnickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_SEND_INVITATION.friendNickname)
  return _internal_mutable_friendnickname();
}
inline const std::string& C_SEND_INVITATION::_internal_friendnickname() const {
  return friendnickname_.Get();
}
inline void C_SEND_INVITATION::_internal_set_friendnickname(const std::string& value) {
  
  friendnickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_SEND_INVITATION::_internal_mutable_friendnickname() {
  
  return friendnickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_SEND_INVITATION::release_friendnickname() {
  // @@protoc_insertion_point(field_release:Protocol.C_SEND_INVITATION.friendNickname)
  return friendnickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_SEND_INVITATION::set_allocated_friendnickname(std::string* friendnickname) {
  if (friendnickname != nullptr) {
    
  } else {
    
  }
  friendnickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), friendnickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_SEND_INVITATION.friendNickname)
}

// uint64 roomNum = 2;
inline void C_SEND_INVITATION::clear_roomnum() {
  roomnum_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_SEND_INVITATION::_internal_roomnum() const {
  return roomnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_SEND_INVITATION::roomnum() const {
  // @@protoc_insertion_point(field_get:Protocol.C_SEND_INVITATION.roomNum)
  return _internal_roomnum();
}
inline void C_SEND_INVITATION::_internal_set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  roomnum_ = value;
}
inline void C_SEND_INVITATION::set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomnum(value);
  // @@protoc_insertion_point(field_set:Protocol.C_SEND_INVITATION.roomNum)
}

// -------------------------------------------------------------------

// S_SEND_INVITATION

// bool success = 1;
inline void S_SEND_INVITATION::clear_success() {
  success_ = false;
}
inline bool S_SEND_INVITATION::_internal_success() const {
  return success_;
}
inline bool S_SEND_INVITATION::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SEND_INVITATION.success)
  return _internal_success();
}
inline void S_SEND_INVITATION::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_SEND_INVITATION::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SEND_INVITATION.success)
}

// optional string myNickname = 2;
inline bool S_SEND_INVITATION::_internal_has_mynickname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool S_SEND_INVITATION::has_mynickname() const {
  return _internal_has_mynickname();
}
inline void S_SEND_INVITATION::clear_mynickname() {
  mynickname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& S_SEND_INVITATION::mynickname() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SEND_INVITATION.myNickname)
  return _internal_mynickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_SEND_INVITATION::set_mynickname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 mynickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_SEND_INVITATION.myNickname)
}
inline std::string* S_SEND_INVITATION::mutable_mynickname() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SEND_INVITATION.myNickname)
  return _internal_mutable_mynickname();
}
inline const std::string& S_SEND_INVITATION::_internal_mynickname() const {
  return mynickname_.Get();
}
inline void S_SEND_INVITATION::_internal_set_mynickname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  mynickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_SEND_INVITATION::_internal_mutable_mynickname() {
  _has_bits_[0] |= 0x00000001u;
  return mynickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_SEND_INVITATION::release_mynickname() {
  // @@protoc_insertion_point(field_release:Protocol.S_SEND_INVITATION.myNickname)
  if (!_internal_has_mynickname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return mynickname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_SEND_INVITATION::set_allocated_mynickname(std::string* mynickname) {
  if (mynickname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  mynickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mynickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_SEND_INVITATION.myNickname)
}

// optional uint64 roomNum = 3;
inline bool S_SEND_INVITATION::_internal_has_roomnum() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool S_SEND_INVITATION::has_roomnum() const {
  return _internal_has_roomnum();
}
inline void S_SEND_INVITATION::clear_roomnum() {
  roomnum_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_SEND_INVITATION::_internal_roomnum() const {
  return roomnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_SEND_INVITATION::roomnum() const {
  // @@protoc_insertion_point(field_get:Protocol.S_SEND_INVITATION.roomNum)
  return _internal_roomnum();
}
inline void S_SEND_INVITATION::_internal_set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  roomnum_ = value;
}
inline void S_SEND_INVITATION::set_roomnum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_roomnum(value);
  // @@protoc_insertion_point(field_set:Protocol.S_SEND_INVITATION.roomNum)
}

// -------------------------------------------------------------------

// C_ENTER_GAME

// uint64 playerIndex = 1;
inline void C_ENTER_GAME::clear_playerindex() {
  playerindex_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_ENTER_GAME::_internal_playerindex() const {
  return playerindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 C_ENTER_GAME::playerindex() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ENTER_GAME.playerIndex)
  return _internal_playerindex();
}
inline void C_ENTER_GAME::_internal_set_playerindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  playerindex_ = value;
}
inline void C_ENTER_GAME::set_playerindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_playerindex(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ENTER_GAME.playerIndex)
}

// -------------------------------------------------------------------

// S_ENTER_GAME

// bool success = 1;
inline void S_ENTER_GAME::clear_success() {
  success_ = false;
}
inline bool S_ENTER_GAME::_internal_success() const {
  return success_;
}
inline bool S_ENTER_GAME::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.success)
  return _internal_success();
}
inline void S_ENTER_GAME::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void S_ENTER_GAME::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_GAME.success)
}

// -------------------------------------------------------------------

// C_CHAT

// string msg = 1;
inline void C_CHAT::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& C_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CHAT.msg)
}
inline std::string* C_CHAT::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Protocol.C_CHAT.msg)
  return _internal_mutable_msg();
}
inline const std::string& C_CHAT::_internal_msg() const {
  return msg_.Get();
}
inline void C_CHAT::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* C_CHAT::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* C_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.C_CHAT.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void C_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CHAT.msg)
}

// -------------------------------------------------------------------

// S_CHAT

// uint64 playerId = 1;
inline void S_CHAT::clear_playerid() {
  playerid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_CHAT::_internal_playerid() const {
  return playerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 S_CHAT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.playerId)
  return _internal_playerid();
}
inline void S_CHAT::_internal_set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  playerid_ = value;
}
inline void S_CHAT::set_playerid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.playerId)
}

// string msg = 2;
inline void S_CHAT::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& S_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.msg)
}
inline std::string* S_CHAT::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHAT.msg)
  return _internal_mutable_msg();
}
inline const std::string& S_CHAT::_internal_msg() const {
  return msg_.Get();
}
inline void S_CHAT::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* S_CHAT::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* S_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHAT.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void S_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHAT.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
